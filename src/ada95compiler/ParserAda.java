
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 25 15:55:08 CST 2016
//----------------------------------------------------

package ada95compiler;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 25 15:55:08 CST 2016
  */
public class ParserAda extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserAda() {super();}

  /** Constructor which sets the default scanner. */
  public ParserAda(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserAda(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\003\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\005\000\002\003\003" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\004\000\002\006\003\000\002" +
    "\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\022\007\004\010\013\020\017\037\006\050" +
    "\015\051\011\052\007\053\020\001\002\000\040\002\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\040\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9" +
    "\061\uffe9\001\002\000\040\002\ufffc\011\ufffc\012\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\040\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\001\002\000" +
    "\022\007\004\010\013\020\017\037\006\050\015\051\011" +
    "\052\007\053\020\001\002\000\040\002\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\040\ufff9" +
    "\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\001" +
    "\002\000\040\002\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe" +
    "\015\ufffe\016\ufffe\017\ufffe\040\ufffe\054\ufffe\055\ufffe\056" +
    "\ufffe\057\ufffe\060\ufffe\061\ufffe\001\002\000\040\002\ufffa" +
    "\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\040\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa" +
    "\061\ufffa\001\002\000\040\002\uffff\011\uffff\012\uffff\013" +
    "\uffff\014\uffff\015\uffff\016\uffff\017\uffff\040\uffff\054\uffff" +
    "\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff\001\002\000" +
    "\040\002\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\040\uffe8\054\uffe8\055\uffe8\056\uffe8\057" +
    "\uffe8\060\uffe8\061\uffe8\001\002\000\040\002\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\040" +
    "\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb" +
    "\001\002\000\040\002\001\011\001\012\001\013\001\014" +
    "\001\015\001\016\001\017\001\040\001\054\001\055\001" +
    "\056\001\057\001\060\001\061\001\001\002\000\036\002" +
    "\054\011\030\012\036\013\024\014\034\015\031\016\022" +
    "\017\035\054\033\055\023\056\027\057\025\060\032\061" +
    "\026\001\002\000\022\007\004\010\013\020\017\037\006" +
    "\050\015\051\011\052\007\053\020\001\002\000\040\002" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\040\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060" +
    "\ufff8\061\ufff8\001\002\000\040\002\uffea\011\uffea\012\uffea" +
    "\013\024\014\uffea\015\uffea\016\uffea\017\uffea\040\uffea\054" +
    "\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\001\002" +
    "\000\022\007\004\010\013\020\017\037\006\050\015\051" +
    "\011\052\007\053\020\001\002\000\022\007\004\010\013" +
    "\020\017\037\006\050\015\051\011\052\007\053\020\001" +
    "\002\000\022\007\004\010\013\020\017\037\006\050\015" +
    "\051\011\052\007\053\020\001\002\000\022\007\004\010" +
    "\013\020\017\037\006\050\015\051\011\052\007\053\020" +
    "\001\002\000\022\007\004\010\013\020\017\037\006\050" +
    "\015\051\011\052\007\053\020\001\002\000\022\007\004" +
    "\010\013\020\017\037\006\050\015\051\011\052\007\053" +
    "\020\001\002\000\022\007\004\010\013\020\017\037\006" +
    "\050\015\051\011\052\007\053\020\001\002\000\022\007" +
    "\004\010\013\020\017\037\006\050\015\051\011\052\007" +
    "\053\020\001\002\000\022\007\004\010\013\020\017\037" +
    "\006\050\015\051\011\052\007\053\020\001\002\000\022" +
    "\007\004\010\013\020\017\037\006\050\015\051\011\052" +
    "\007\053\020\001\002\000\022\007\004\010\013\020\017" +
    "\037\006\050\015\051\011\052\007\053\020\001\002\000" +
    "\022\007\004\010\013\020\017\037\006\050\015\051\011" +
    "\052\007\053\020\001\002\000\022\007\004\010\013\020" +
    "\017\037\006\050\015\051\011\052\007\053\020\001\002" +
    "\000\040\002\ufff6\011\ufff6\012\ufff6\013\024\014\034\015" +
    "\031\016\ufff6\017\ufff6\040\ufff6\054\ufff6\055\ufff6\056\ufff6" +
    "\057\ufff6\060\ufff6\061\ufff6\001\002\000\040\002\uffeb\011" +
    "\030\012\036\013\024\014\034\015\031\016\uffeb\017\uffeb" +
    "\040\uffeb\054\033\055\023\056\027\057\025\060\032\061" +
    "\026\001\002\000\040\002\ufff5\011\ufff5\012\ufff5\013\024" +
    "\014\ufff5\015\ufff5\016\ufff5\017\ufff5\040\ufff5\054\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\001\002\000\040" +
    "\002\ufff2\011\030\012\036\013\024\014\034\015\031\016" +
    "\ufff2\017\ufff2\040\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2" +
    "\060\ufff2\061\ufff2\001\002\000\040\002\uffee\011\030\012" +
    "\036\013\024\014\034\015\031\016\uffee\017\uffee\040\uffee" +
    "\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\001" +
    "\002\000\040\002\ufff4\011\ufff4\012\ufff4\013\024\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\040\ufff4\054\ufff4\055\ufff4\056" +
    "\ufff4\057\ufff4\060\ufff4\061\ufff4\001\002\000\040\002\ufff7" +
    "\011\ufff7\012\ufff7\013\024\014\034\015\031\016\ufff7\017" +
    "\ufff7\040\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7" +
    "\061\ufff7\001\002\000\040\002\ufff0\011\030\012\036\013" +
    "\024\014\034\015\031\016\ufff0\017\ufff0\040\ufff0\054\ufff0" +
    "\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\001\002\000" +
    "\040\002\uffed\011\030\012\036\013\024\014\034\015\031" +
    "\016\uffed\017\uffed\040\uffed\054\uffed\055\uffed\056\uffed\057" +
    "\uffed\060\uffed\061\uffed\001\002\000\040\002\uffef\011\030" +
    "\012\036\013\024\014\034\015\031\016\uffef\017\uffef\040" +
    "\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef" +
    "\001\002\000\040\002\ufff3\011\ufff3\012\ufff3\013\024\014" +
    "\ufff3\015\ufff3\016\ufff3\017\ufff3\040\ufff3\054\ufff3\055\ufff3" +
    "\056\ufff3\057\ufff3\060\ufff3\061\ufff3\001\002\000\040\002" +
    "\ufff1\011\030\012\036\013\024\014\034\015\031\016\ufff1" +
    "\017\ufff1\040\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060" +
    "\ufff1\061\ufff1\001\002\000\040\002\uffec\011\030\012\036" +
    "\013\024\014\034\015\031\016\uffec\017\uffec\040\uffec\054" +
    "\033\055\023\056\027\057\025\060\032\061\026\001\002" +
    "\000\004\002\000\001\002\000\036\011\030\012\036\013" +
    "\024\014\034\015\031\016\022\017\035\040\056\054\033" +
    "\055\023\056\027\057\025\060\032\061\026\001\002\000" +
    "\040\002\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\016\ufffd\017\ufffd\040\ufffd\054\ufffd\055\ufffd\056\ufffd\057" +
    "\ufffd\060\ufffd\061\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\014\002\007\003\015\004\011\005\004\006" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\007\003\054\004\011\005\004\006\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\007\003\020\004\011" +
    "\005\004\006\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\002\007\003\052\004\011\005\004\006\013" +
    "\001\001\000\014\002\007\003\051\004\011\005\004\006" +
    "\013\001\001\000\014\002\007\003\050\004\011\005\004" +
    "\006\013\001\001\000\014\002\007\003\047\004\011\005" +
    "\004\006\013\001\001\000\014\002\007\003\046\004\011" +
    "\005\004\006\013\001\001\000\014\002\007\003\045\004" +
    "\011\005\004\006\013\001\001\000\014\002\007\003\044" +
    "\004\011\005\004\006\013\001\001\000\014\002\007\003" +
    "\043\004\011\005\004\006\013\001\001\000\014\002\007" +
    "\003\042\004\011\005\004\006\013\001\001\000\014\002" +
    "\007\003\041\004\011\005\004\006\013\001\001\000\014" +
    "\002\007\003\040\004\011\005\004\006\013\001\001\000" +
    "\014\002\007\003\037\004\011\005\004\006\013\001\001" +
    "\000\014\002\007\003\036\004\011\005\004\006\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserAda$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserAda$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserAda$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



      AdaLexer lexer;

      public ParserAda(AdaLexer lex){
       super(lex);
       lexer = lex;
      }


  
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserAda$actions {
  private final ParserAda parser;

  /** Constructor */
  CUP$ParserAda$actions(ParserAda parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserAda$do_action(
    int                        CUP$ParserAda$act_num,
    java_cup.runtime.lr_parser CUP$ParserAda$parser,
    java.util.Stack            CUP$ParserAda$stack,
    int                        CUP$ParserAda$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserAda$result;

      /* select the action based on the action number */
      switch (CUP$ParserAda$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // logical_expre ::= FALSE 
            {
              Object RESULT =null;
		 System.out.println("false");
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("logical_expre",4, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // logical_expre ::= TRUE 
            {
              Object RESULT =null;
		 System.out.println("true");
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("logical_expre",4, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // logical_expre ::= NOT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println("not"+e1);
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("logical_expre",4, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // logical_expre ::= expression OR expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"or"+e2);
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("logical_expre",4, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // logical_expre ::= expression AND expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"and"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("logical_expre",4, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // boolean_expre ::= expression EQUAL expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"="+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("boolean_expre",3, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // boolean_expre ::= expression LESS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"<"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("boolean_expre",3, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // boolean_expre ::= expression GREATER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+">"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("boolean_expre",3, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // boolean_expre ::= expression DISTINCT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"/="+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("boolean_expre",3, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // boolean_expre ::= expression GEQUAL expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+">="+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("boolean_expre",3, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // boolean_expre ::= expression LEQUAL expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"<="+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("boolean_expre",3, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arit_expre ::= expression POT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"**"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("arit_expre",0, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arit_expre ::= expression DIV expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"/"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("arit_expre",0, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arit_expre ::= expression MUL expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"*"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("arit_expre",0, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // arit_expre ::= expression MIN expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"-"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("arit_expre",0, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // arit_expre ::= expression ADD expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"+"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("arit_expre",0, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // literal_expre ::= STRINGCONT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT= s;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("literal_expre",2, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // literal_expre ::= INTEGERN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Integer num1 = (Integer)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT = num1;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("literal_expre",2, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // literal_expre ::= FLOATN 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Float num = (Float)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT = num;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("literal_expre",2, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expression ::= logical_expre 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		RESULT=le; 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expression ::= boolean_expre 
            {
              Object RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT=be; 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expression ::= LPAR expression RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).value;
		RESULT=e1; 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expression ::= arit_expre 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT = ar;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expression ::= literal_expre 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT = le;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expression EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).value;
		RESULT = start_val;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserAda$parser.done_parsing();
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expression ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT = id;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

