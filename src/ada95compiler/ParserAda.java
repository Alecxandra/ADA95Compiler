
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 25 11:31:58 CST 2016
//----------------------------------------------------

package ada95compiler;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 25 11:31:58 CST 2016
  */
public class ParserAda extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserAda() {super();}

  /** Constructor which sets the default scanner. */
  public ParserAda(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserAda(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\003\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\005\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\026\000\014\037\007\050\004\051\005\052\013\053" +
    "\006\001\002\000\020\002\001\011\001\012\001\013\001" +
    "\014\001\015\001\040\001\001\002\000\020\002\ufffc\011" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\040\ufffc\001\002" +
    "\000\020\002\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015" +
    "\ufffa\040\ufffa\001\002\000\014\037\007\050\004\051\005" +
    "\052\013\053\006\001\002\000\020\002\uffff\011\uffff\012" +
    "\uffff\013\uffff\014\uffff\015\uffff\040\uffff\001\002\000\016" +
    "\002\021\011\015\012\014\013\017\014\016\015\020\001" +
    "\002\000\020\002\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe" +
    "\015\ufffe\040\ufffe\001\002\000\020\002\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\015\ufffb\040\ufffb\001\002\000\014" +
    "\037\007\050\004\051\005\052\013\053\006\001\002\000" +
    "\014\037\007\050\004\051\005\052\013\053\006\001\002" +
    "\000\014\037\007\050\004\051\005\052\013\053\006\001" +
    "\002\000\014\037\007\050\004\051\005\052\013\053\006" +
    "\001\002\000\014\037\007\050\004\051\005\052\013\053" +
    "\006\001\002\000\004\002\000\001\002\000\020\002\ufff6" +
    "\011\ufff6\012\ufff6\013\017\014\ufff6\015\ufff6\040\ufff6\001" +
    "\002\000\020\002\ufff5\011\ufff5\012\ufff5\013\017\014\ufff5" +
    "\015\ufff5\040\ufff5\001\002\000\020\002\ufff7\011\ufff7\012" +
    "\ufff7\013\017\014\ufff7\015\ufff7\040\ufff7\001\002\000\020" +
    "\002\ufff9\011\ufff9\012\ufff9\013\017\014\016\015\020\040" +
    "\ufff9\001\002\000\020\002\ufff8\011\ufff8\012\ufff8\013\017" +
    "\014\016\015\020\040\ufff8\001\002\000\016\011\015\012" +
    "\014\013\017\014\016\015\020\040\030\001\002\000\020" +
    "\002\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\040" +
    "\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\026\000\010\002\011\003\010\004\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\011\003\026\004\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\011\003\025\004\007\001\001\000\010\002\011\003" +
    "\024\004\007\001\001\000\010\002\011\003\023\004\007" +
    "\001\001\000\010\002\011\003\022\004\007\001\001\000" +
    "\010\002\011\003\021\004\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserAda$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserAda$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserAda$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



      AdaLexer lexer;

      public ParserAda(AdaLexer lex){
       super(lex);
       lexer = lex;
      }


  
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserAda$actions {
  private final ParserAda parser;

  /** Constructor */
  CUP$ParserAda$actions(ParserAda parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserAda$do_action(
    int                        CUP$ParserAda$act_num,
    java_cup.runtime.lr_parser CUP$ParserAda$parser,
    java.util.Stack            CUP$ParserAda$stack,
    int                        CUP$ParserAda$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserAda$result;

      /* select the action based on the action number */
      switch (CUP$ParserAda$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arit_expre ::= expression POT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"**"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("arit_expre",0, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // arit_expre ::= expression DIV expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"/"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("arit_expre",0, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // arit_expre ::= expression MUL expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"*"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("arit_expre",0, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // arit_expre ::= expression MIN expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"-"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("arit_expre",0, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // arit_expre ::= expression ADD expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"+"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("arit_expre",0, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // literal_expre ::= STRINGCONT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT= s;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("literal_expre",2, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literal_expre ::= INTEGERN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Integer num1 = (Integer)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT = num1;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("literal_expre",2, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // literal_expre ::= FLOATN 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Float num = (Float)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT = num;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("literal_expre",2, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expression ::= LPAR expression RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).value;
		RESULT=e1; 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expression ::= arit_expre 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT = ar;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expression ::= literal_expre 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT = le;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expression EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).value;
		RESULT = start_val;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserAda$parser.done_parsing();
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expression ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT = id;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

