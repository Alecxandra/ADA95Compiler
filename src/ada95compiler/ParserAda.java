
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package ada95compiler;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserAda extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserAda() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserAda(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserAda(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\012\004\000\002\002\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\005\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\004\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\004\000\002\006\003" +
    "\000\002\006\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\007\005\000\002\010\003\000\002" +
    "\010\005\000\002\013\005\000\002\014\006\000\002\014" +
    "\006\000\002\015\006\000\002\015\005\000\002\016\003" +
    "\000\002\016\005\000\002\017\010\000\002\017\011\000" +
    "\002\017\012\000\002\017\013\000\002\020\007\000\002" +
    "\020\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\032\007\013\010\030\012\031\021\010\022" +
    "\033\023\021\024\016\040\032\052\020\053\024\054\006" +
    "\055\011\001\002\000\004\002\153\001\002\000\004\036" +
    "\152\001\002\000\044\011\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\017\ufff3\020\ufff3\025\ufff3\035\ufff3\036\ufff3\041" +
    "\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3" +
    "\001\002\000\044\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\017\ufff7\020\ufff7\025\ufff7\035\ufff7\036\ufff7\041\ufff7" +
    "\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\001" +
    "\002\000\024\007\013\010\030\012\031\021\010\040\032" +
    "\052\040\053\024\054\006\055\011\001\002\000\044\011" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\017\ufff2\020\ufff2" +
    "\025\ufff2\035\ufff2\036\ufff2\041\ufff2\056\ufff2\057\ufff2\060" +
    "\ufff2\061\ufff2\062\ufff2\063\ufff2\001\002\000\044\011\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\015\ufff5\017\ufff5\020\ufff5\025" +
    "\ufff5\035\ufff5\036\ufff5\041\ufff5\056\ufff5\057\ufff5\060\ufff5" +
    "\061\ufff5\062\ufff5\063\ufff5\001\002\000\044\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\017\uffe2\020\uffe2\025\uffe2" +
    "\035\uffe2\036\uffe2\041\uffe2\056\uffe2\057\uffe2\060\uffe2\061" +
    "\uffe2\062\uffe2\063\uffe2\001\002\000\004\036\150\001\002" +
    "\000\044\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\017" +
    "\ufff9\020\ufff9\025\ufff9\035\ufff9\036\ufff9\041\ufff9\056\ufff9" +
    "\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\001\002\000" +
    "\024\007\013\010\030\012\031\021\010\040\032\052\040" +
    "\053\024\054\006\055\011\001\002\000\006\035\114\037" +
    "\115\001\002\000\046\011\ufffb\012\ufffb\013\ufffb\014\ufffb" +
    "\015\ufffb\017\ufffb\020\ufffb\035\uffdc\036\ufffb\037\uffdc\040" +
    "\041\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb" +
    "\064\112\001\002\000\004\040\107\001\002\000\044\011" +
    "\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\017\ufffa\020\ufffa" +
    "\025\ufffa\035\ufffa\036\ufffa\041\ufffa\056\ufffa\057\ufffa\060" +
    "\ufffa\061\ufffa\062\ufffa\063\ufffa\001\002\000\044\011\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\015\ufff6\017\ufff6\020\ufff6\025" +
    "\ufff6\035\ufff6\036\ufff6\041\ufff6\056\ufff6\057\ufff6\060\ufff6" +
    "\061\ufff6\062\ufff6\063\ufff6\001\002\000\044\011\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\017\ufff4\020\ufff4\025\ufff4" +
    "\035\ufff4\036\ufff4\041\ufff4\056\ufff4\057\ufff4\060\ufff4\061" +
    "\ufff4\062\ufff4\063\ufff4\001\002\000\004\036\106\001\002" +
    "\000\036\011\053\012\061\013\047\014\057\015\054\017" +
    "\046\020\060\036\105\056\056\057\045\060\052\061\050" +
    "\062\055\063\051\001\002\000\004\036\104\001\002\000" +
    "\044\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\017\uffe1" +
    "\020\uffe1\025\uffe1\035\uffe1\036\uffe1\041\uffe1\056\uffe1\057" +
    "\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\001\002\000\024" +
    "\007\013\010\030\012\031\021\010\040\032\052\040\053" +
    "\024\054\006\055\011\001\002\000\024\007\013\010\030" +
    "\012\031\021\010\040\032\052\040\053\024\054\006\055" +
    "\011\001\002\000\004\040\034\001\002\000\004\052\035" +
    "\001\002\000\004\041\036\001\002\000\004\036\uffd9\001" +
    "\002\000\036\011\053\012\061\013\047\014\057\015\054" +
    "\017\046\020\060\041\102\056\056\057\045\060\052\061" +
    "\050\062\055\063\051\001\002\000\046\011\ufffb\012\ufffb" +
    "\013\ufffb\014\ufffb\015\ufffb\017\ufffb\020\ufffb\025\ufffb\035" +
    "\ufffb\036\ufffb\040\041\041\ufffb\056\ufffb\057\ufffb\060\ufffb" +
    "\061\ufffb\062\ufffb\063\ufffb\001\002\000\026\007\013\010" +
    "\030\012\031\021\010\040\032\041\044\052\040\053\024" +
    "\054\006\055\011\001\002\000\006\035\077\041\100\001" +
    "\002\000\040\011\053\012\061\013\047\014\057\015\054" +
    "\017\046\020\060\035\uffd5\041\uffd5\056\056\057\045\060" +
    "\052\061\050\062\055\063\051\001\002\000\044\011\uffd6" +
    "\012\uffd6\013\uffd6\014\uffd6\015\uffd6\017\uffd6\020\uffd6\025" +
    "\uffd6\035\uffd6\036\uffd6\041\uffd6\056\uffd6\057\uffd6\060\uffd6" +
    "\061\uffd6\062\uffd6\063\uffd6\001\002\000\024\007\013\010" +
    "\030\012\031\021\010\040\032\052\040\053\024\054\006" +
    "\055\011\001\002\000\024\007\013\010\030\012\031\021" +
    "\010\040\032\052\040\053\024\054\006\055\011\001\002" +
    "\000\024\007\013\010\030\012\031\021\010\040\032\052" +
    "\040\053\024\054\006\055\011\001\002\000\024\007\013" +
    "\010\030\012\031\021\010\040\032\052\040\053\024\054" +
    "\006\055\011\001\002\000\024\007\013\010\030\012\031" +
    "\021\010\040\032\052\040\053\024\054\006\055\011\001" +
    "\002\000\024\007\013\010\030\012\031\021\010\040\032" +
    "\052\040\053\024\054\006\055\011\001\002\000\024\007" +
    "\013\010\030\012\031\021\010\040\032\052\040\053\024" +
    "\054\006\055\011\001\002\000\024\007\013\010\030\012" +
    "\031\021\010\040\032\052\040\053\024\054\006\055\011" +
    "\001\002\000\024\007\013\010\030\012\031\021\010\040" +
    "\032\052\040\053\024\054\006\055\011\001\002\000\024" +
    "\007\013\010\030\012\031\021\010\040\032\052\040\053" +
    "\024\054\006\055\011\001\002\000\024\007\013\010\030" +
    "\012\031\021\010\040\032\052\040\053\024\054\006\055" +
    "\011\001\002\000\024\007\013\010\030\012\031\021\010" +
    "\040\032\052\040\053\024\054\006\055\011\001\002\000" +
    "\024\007\013\010\030\012\031\021\010\040\032\052\040" +
    "\053\024\054\006\055\011\001\002\000\044\011\ufff0\012" +
    "\ufff0\013\047\014\057\015\054\017\ufff0\020\ufff0\025\ufff0" +
    "\035\ufff0\036\ufff0\041\ufff0\056\ufff0\057\ufff0\060\ufff0\061" +
    "\ufff0\062\ufff0\063\ufff0\001\002\000\044\011\053\012\061" +
    "\013\047\014\057\015\054\017\uffe4\020\uffe4\025\uffe4\035" +
    "\uffe4\036\uffe4\041\uffe4\056\056\057\045\060\052\061\050" +
    "\062\055\063\051\001\002\000\044\011\uffef\012\uffef\013" +
    "\047\014\uffef\015\uffef\017\uffef\020\uffef\025\uffef\035\uffef" +
    "\036\uffef\041\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062" +
    "\uffef\063\uffef\001\002\000\044\011\053\012\061\013\047" +
    "\014\057\015\054\017\uffeb\020\uffeb\025\uffeb\035\uffeb\036" +
    "\uffeb\041\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb" +
    "\063\uffeb\001\002\000\044\011\053\012\061\013\047\014" +
    "\057\015\054\017\uffe7\020\uffe7\025\uffe7\035\uffe7\036\uffe7" +
    "\041\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063" +
    "\uffe7\001\002\000\044\011\uffee\012\uffee\013\047\014\uffee" +
    "\015\uffee\017\uffee\020\uffee\025\uffee\035\uffee\036\uffee\041" +
    "\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee" +
    "\001\002\000\044\011\ufff1\012\ufff1\013\047\014\057\015" +
    "\054\017\ufff1\020\ufff1\025\ufff1\035\ufff1\036\ufff1\041\ufff1" +
    "\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\001" +
    "\002\000\044\011\053\012\061\013\047\014\057\015\054" +
    "\017\uffe9\020\uffe9\025\uffe9\035\uffe9\036\uffe9\041\uffe9\056" +
    "\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\001\002" +
    "\000\044\011\053\012\061\013\047\014\057\015\054\017" +
    "\uffe6\020\uffe6\025\uffe6\035\uffe6\036\uffe6\041\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\001\002\000" +
    "\044\011\053\012\061\013\047\014\057\015\054\017\uffe8" +
    "\020\uffe8\025\uffe8\035\uffe8\036\uffe8\041\uffe8\056\uffe8\057" +
    "\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\001\002\000\044" +
    "\011\uffed\012\uffed\013\047\014\uffed\015\uffed\017\uffed\020" +
    "\uffed\025\uffed\035\uffed\036\uffed\041\uffed\056\uffed\057\uffed" +
    "\060\uffed\061\uffed\062\uffed\063\uffed\001\002\000\044\011" +
    "\053\012\061\013\047\014\057\015\054\017\uffe5\020\uffe5" +
    "\025\uffe5\035\uffe5\036\uffe5\041\uffe5\056\056\057\045\060" +
    "\052\061\050\062\055\063\051\001\002\000\044\011\053" +
    "\012\061\013\047\014\057\015\054\017\uffea\020\uffea\025" +
    "\uffea\035\uffea\036\uffea\041\uffea\056\uffea\057\uffea\060\uffea" +
    "\061\uffea\062\uffea\063\uffea\001\002\000\024\007\013\010" +
    "\030\012\031\021\010\040\032\052\040\053\024\054\006" +
    "\055\011\001\002\000\044\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\017\uffd7\020\uffd7\025\uffd7\035\uffd7\036\uffd7" +
    "\041\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063" +
    "\uffd7\001\002\000\040\011\053\012\061\013\047\014\057" +
    "\015\054\017\046\020\060\035\uffd4\041\uffd4\056\056\057" +
    "\045\060\052\061\050\062\055\063\051\001\002\000\044" +
    "\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\017\ufff8\020" +
    "\ufff8\025\ufff8\035\ufff8\036\ufff8\041\ufff8\056\ufff8\057\ufff8" +
    "\060\ufff8\061\ufff8\062\ufff8\063\ufff8\001\002\000\044\011" +
    "\uffec\012\uffec\013\047\014\uffec\015\uffec\017\uffec\020\uffec" +
    "\025\uffec\035\uffec\036\uffec\041\uffec\056\uffec\057\uffec\060" +
    "\uffec\061\uffec\062\uffec\063\uffec\001\002\000\012\002\ufffd" +
    "\026\ufffd\027\ufffd\046\ufffd\001\002\000\012\002\uffff\026" +
    "\uffff\027\uffff\046\uffff\001\002\000\012\002\ufffe\026\ufffe" +
    "\027\ufffe\046\ufffe\001\002\000\024\007\013\010\030\012" +
    "\031\021\010\040\032\052\040\053\024\054\006\055\011" +
    "\001\002\000\036\011\053\012\061\013\047\014\057\015" +
    "\054\017\046\020\060\041\111\056\056\057\045\060\052" +
    "\061\050\062\055\063\051\001\002\000\004\036\uffd8\001" +
    "\002\000\024\007\013\010\030\012\031\021\010\040\032" +
    "\052\040\053\024\054\006\055\011\001\002\000\036\011" +
    "\053\012\061\013\047\014\057\015\054\017\046\020\060" +
    "\036\uffda\056\056\057\045\060\052\061\050\062\055\063" +
    "\051\001\002\000\004\052\122\001\002\000\010\004\116" +
    "\005\120\006\121\001\002\000\004\036\uffe0\001\002\000" +
    "\004\036\uffdd\001\002\000\004\036\uffdf\001\002\000\004" +
    "\036\uffde\001\002\000\006\035\uffdb\037\uffdb\001\002\000" +
    "\036\011\053\012\061\013\047\014\057\015\054\017\046" +
    "\020\060\025\124\056\056\057\045\060\052\061\050\062" +
    "\055\063\051\001\002\000\032\007\013\010\030\012\031" +
    "\021\010\022\033\023\021\024\016\040\032\052\020\053" +
    "\024\054\006\055\011\001\002\000\010\026\130\027\126" +
    "\046\131\001\002\000\032\007\013\010\030\012\031\021" +
    "\010\022\033\023\021\024\016\040\032\052\020\053\024" +
    "\054\006\055\011\001\002\000\006\027\137\046\140\001" +
    "\002\000\024\007\013\010\030\012\031\021\010\040\032" +
    "\052\040\053\024\054\006\055\011\001\002\000\004\024" +
    "\132\001\002\000\004\036\uffd3\001\002\000\036\011\053" +
    "\012\061\013\047\014\057\015\054\017\046\020\060\025" +
    "\134\056\056\057\045\060\052\061\050\062\055\063\051" +
    "\001\002\000\032\007\013\010\030\012\031\021\010\022" +
    "\033\023\021\024\016\040\032\052\020\053\024\054\006" +
    "\055\011\001\002\000\010\026\130\027\uffce\046\uffce\001" +
    "\002\000\006\027\uffcf\046\uffcf\001\002\000\032\007\013" +
    "\010\030\012\031\021\010\022\033\023\021\024\016\040" +
    "\032\052\020\053\024\054\006\055\011\001\002\000\004" +
    "\024\141\001\002\000\004\036\uffd2\001\002\000\004\046" +
    "\143\001\002\000\004\024\144\001\002\000\004\036\uffd0" +
    "\001\002\000\004\046\146\001\002\000\004\024\147\001" +
    "\002\000\004\036\uffd1\001\002\000\012\002\001\026\001" +
    "\027\001\046\001\001\002\000\044\011\uffe3\012\uffe3\013" +
    "\047\014\uffe3\015\uffe3\017\uffe3\020\uffe3\025\uffe3\035\uffe3" +
    "\036\uffe3\041\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062" +
    "\uffe3\063\uffe3\001\002\000\012\002\ufffc\026\ufffc\027\ufffc" +
    "\046\ufffc\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\032\002\014\003\025\004\021\005\006\006" +
    "\022\007\013\010\016\012\003\013\024\014\026\015\011" +
    "\017\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\002\014\003\150" +
    "\004\021\005\006\006\022\015\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\002\014\003\122\004\021\005" +
    "\006\006\022\015\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\002\014\003" +
    "\102\004\021\005\006\006\022\015\011\001\001\000\016" +
    "\002\014\003\036\004\021\005\006\006\022\015\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\002\014\003\042\004\021\005\006\006\022\015\011" +
    "\016\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\002\014\003\075\004\021\005\006" +
    "\006\022\015\011\001\001\000\016\002\014\003\074\004" +
    "\021\005\006\006\022\015\011\001\001\000\016\002\014" +
    "\003\073\004\021\005\006\006\022\015\011\001\001\000" +
    "\016\002\014\003\072\004\021\005\006\006\022\015\011" +
    "\001\001\000\016\002\014\003\071\004\021\005\006\006" +
    "\022\015\011\001\001\000\016\002\014\003\070\004\021" +
    "\005\006\006\022\015\011\001\001\000\016\002\014\003" +
    "\067\004\021\005\006\006\022\015\011\001\001\000\016" +
    "\002\014\003\066\004\021\005\006\006\022\015\011\001" +
    "\001\000\016\002\014\003\065\004\021\005\006\006\022" +
    "\015\011\001\001\000\016\002\014\003\064\004\021\005" +
    "\006\006\022\015\011\001\001\000\016\002\014\003\063" +
    "\004\021\005\006\006\022\015\011\001\001\000\016\002" +
    "\014\003\062\004\021\005\006\006\022\015\011\001\001" +
    "\000\016\002\014\003\061\004\021\005\006\006\022\015" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\002\014\003\100\004\021\005\006" +
    "\006\022\015\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\002\014\003" +
    "\107\004\021\005\006\006\022\015\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\002\014\003\112\004" +
    "\021\005\006\006\022\015\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\002\014\003" +
    "\025\004\021\005\006\006\022\007\013\010\016\012\124" +
    "\013\024\014\026\015\011\017\004\001\001\000\004\020" +
    "\126\001\001\000\032\002\014\003\025\004\021\005\006" +
    "\006\022\007\013\010\016\012\144\013\024\014\026\015" +
    "\011\017\004\001\001\000\002\001\001\000\016\002\014" +
    "\003\132\004\021\005\006\006\022\015\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\002\014\003\025\004\021\005\006\006\022\007\013\010" +
    "\016\012\134\013\024\014\026\015\011\017\004\001\001" +
    "\000\004\020\135\001\001\000\002\001\001\000\032\002" +
    "\014\003\025\004\021\005\006\006\022\007\013\010\016" +
    "\012\141\013\024\014\026\015\011\017\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserAda$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserAda$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserAda$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



      AdaLexer lexer;

      public ParserAda(AdaLexer lex){
       super(lex);
       lexer = lex;
      }


  

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserAda$actions {
  private final ParserAda parser;

  /** Constructor */
  CUP$ParserAda$actions(ParserAda parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserAda$do_action_part00000000(
    int                        CUP$ParserAda$act_num,
    java_cup.runtime.lr_parser CUP$ParserAda$parser,
    java.util.Stack            CUP$ParserAda$stack,
    int                        CUP$ParserAda$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserAda$result;

      /* select the action based on the action number */
      switch (CUP$ParserAda$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // statement ::= declare_expre SEMICOLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).value;
		 System.out.println(e1+";");
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= statement EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).value;
		RESULT = start_val;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserAda$parser.done_parsing();
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement ::= expression SEMICOLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).value;
		RESULT=e1; System.out.println(e1+";");
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= assignment_expre SEMICOLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).value;
		 RESULT=e1; System.out.println(e1+";");
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= io_expre SEMICOLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).value;
		 RESULT=e1;System.out.println(e1+";");
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= if_statement SEMICOLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).value;
		RESULT=e1;System.out.println(e1+";");
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expression ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT = id;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expression ::= literal_expre 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT = le;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expression ::= arit_expre 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT = ar;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= LPAR expression RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).value;
		RESULT=e1; 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= boolean_expre 
            {
              Object RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT=be; 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= logical_expre 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		RESULT=le; 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= function_call 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		RESULT=e1; 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literal_expre ::= FLOATN 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Float num = (Float)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT = num;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("literal_expre",2, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literal_expre ::= INTEGERN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Integer num1 = (Integer)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT = num1;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("literal_expre",2, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literal_expre ::= STRINGCONT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT= s;
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("literal_expre",2, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arit_expre ::= expression ADD expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"+"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("arit_expre",0, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arit_expre ::= expression MIN expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"-"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("arit_expre",0, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arit_expre ::= expression MUL expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"*"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("arit_expre",0, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arit_expre ::= expression DIV expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"/"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("arit_expre",0, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arit_expre ::= expression POT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"**"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("arit_expre",0, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arit_expre ::= MIN expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println("-"+e1);
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("arit_expre",0, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // boolean_expre ::= expression LEQUAL expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"<="+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("boolean_expre",3, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boolean_expre ::= expression GEQUAL expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+">="+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("boolean_expre",3, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolean_expre ::= expression DISTINCT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"/="+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("boolean_expre",3, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolean_expre ::= expression GREATER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+">"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("boolean_expre",3, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boolean_expre ::= expression LESS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"<"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("boolean_expre",3, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boolean_expre ::= expression EQUAL expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"="+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("boolean_expre",3, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // logical_expre ::= expression AND expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"and"+e2); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("logical_expre",4, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // logical_expre ::= expression OR expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+"or"+e2);
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("logical_expre",4, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // logical_expre ::= NOT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println("not"+e1);
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("logical_expre",4, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // logical_expre ::= TRUE 
            {
              Object RESULT =null;
		 System.out.println("true");
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("logical_expre",4, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // logical_expre ::= FALSE 
            {
              Object RESULT =null;
		 System.out.println("false");
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("logical_expre",4, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= INTEGER 
            {
              Object RESULT =null;
		System.out.println("integer");
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= BOOLEAN 
            {
              Object RESULT =null;
		System.out.println("boolean");
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= FLOAT 
            {
              Object RESULT =null;
		System.out.println("float");
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declare_expre ::= variable_list COLON type 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT=e1;System.out.println(e1+ ":"+e2);
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("declare_expre",5, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variable_list ::= ID 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		RESULT=e1; System.out.println(e1);
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("variable_list",6, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable_list ::= variable_list COMMA ID 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		System.out.println(e1+","+e2);
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("variable_list",6, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assignment_expre ::= ID ASSIGN expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		System.out.println(e1+":="+e3);
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("assignment_expre",9, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // io_expre ::= GET LPAR ID RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).value;
		 System.out.println("get"+"("+e1+")"); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("io_expre",10, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-3)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // io_expre ::= PUT LPAR expression RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).value;
		 System.out.println("put"+"("+e1+")"); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("io_expre",10, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-3)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // function_call ::= ID LPAR arguments_list RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).value;
		 System.out.println(e1+"("+e2+")"); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("function_call",11, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-3)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // function_call ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		 System.out.println(e1+"("+")"); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("function_call",11, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arguments_list ::= expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 RESULT=e1; System.out.println(e1);
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("arguments_list",12, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arguments_list ::= arguments_list COMMA expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println(e1+","+e2);
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("arguments_list",12, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // if_statement ::= IF expression THEN statement END IF 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		 System.out.println("if "+e1+" then "+e2+" end if "); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-5)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // if_statement ::= IF expression THEN statement elsif_statement END IF 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		 System.out.println("if "+e1+" then "+e2+" "+e3+" end if "); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-6)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // if_statement ::= IF expression THEN statement ELSE statement END IF 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		 System.out.println("if "+e1+" then "+e2+" else "+e3+" end if "); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-7)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // if_statement ::= IF expression THEN statement elsif_statement ELSE statement END IF 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-4)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		 System.out.println("if "+e1+" then "+e2+" "+e3+ " else "+e4+" end if "); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-8)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // elsif_statement ::= ELSIF expression THEN statement elsif_statement 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println("elsif "+e1+" then "+e2+ "  "+e3); 
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("elsif_statement",14, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-4)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // elsif_statement ::= ELSIF expression THEN statement 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserAda$stack.peek()).value;
		 System.out.println("elsif "+e1+" then "+e2+ "  ");
              CUP$ParserAda$result = parser.getSymbolFactory().newSymbol("elsif_statement",14, ((java_cup.runtime.Symbol)CUP$ParserAda$stack.elementAt(CUP$ParserAda$top-3)), ((java_cup.runtime.Symbol)CUP$ParserAda$stack.peek()), RESULT);
            }
          return CUP$ParserAda$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserAda$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserAda$do_action(
    int                        CUP$ParserAda$act_num,
    java_cup.runtime.lr_parser CUP$ParserAda$parser,
    java.util.Stack            CUP$ParserAda$stack,
    int                        CUP$ParserAda$top)
    throws java.lang.Exception
    {
              return CUP$ParserAda$do_action_part00000000(
                               CUP$ParserAda$act_num,
                               CUP$ParserAda$parser,
                               CUP$ParserAda$stack,
                               CUP$ParserAda$top);
    }
}

}
