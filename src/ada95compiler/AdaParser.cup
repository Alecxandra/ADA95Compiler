package ada95compiler;

import java_cup.runtime.*;

/* Lexer*/
  parser code {:
      AdaLexer lexer;

      public ParserAda(AdaLexer lex){
       super(lex);
       lexer = lex;
      }


  :}


 /* Terminals */

 /* Types*/
  terminal        INTEGER,BOOLEAN,FLOAT;    

 /* Booleans*/
  terminal        TRUE,FALSE;

 /* arithmetic operations*/
  terminal        ADD,MIN,POT,MUL,DIV,UMIN; 
  
 /* logical expressions */
  terminal        AND,OR,NOT;

 /* I/O */
  terminal        GET,PUT;

 /* control structures */
  terminal        IF,THEN,ELSIF,ELSE,FOR,LOOP,EXIT,WHEN,WHILE;

 /* other symbols */
  terminal        COMMA,SEMICOLON,COLON,LPAR,RPAR;

 /* Blocks */
  terminal        PROCEDURE,IS,BEGIN,END,DECLARE;

 /* Functions*/
  terminal        FUNCTION,RETURN;

 /* variables */
  terminal String ID;

 /* Numbers */
  terminal Float   FLOATN;
  terminal Integer INTEGERN;

 /* Strings*/
  terminal String  STRINGCONT;

 
 /* Boolean operators*/
  terminal        LEQUAL,GEQUAL,DISTINCT,GREATER,LESS,EQUAL;
 
 /*  Assignment operator */
  terminal        ASSIGN;

 /* parameters */
  terminal        INOUT,IN,OUT;

 /* main */
  terminal        MAIN;  

 /* Non terminals*/
 non terminal         arit_expre, expression; 
 non terminal         literal_expre;
 non terminal         boolean_expre;
 non terminal         logical_expre;
 non terminal         declare_expre, variable_list;
 non terminal         type;
 non terminal         statement;

/* precedence */
precedence left   AND,OR;
precedence left   LEQUAL,GEQUAL,GREATER,DISTINCT,LESS,EQUAL; 
precedence left   ADD,MIN;
precedence left   MUL,DIV;
precedence right  POT,NOT,UMIN; 

 /* CFG */
statement ::= declare_expre:e1 SEMICOLON
              {: System.out.println(e1+";");:}
              | expression:e1 SEMICOLON
              
; 
expression ::= ID:id
                {: RESULT = id;:}   
                | literal_expre:le
                {: RESULT = le;:}  
                | arit_expre:ar
                {: RESULT = ar;:}
                | LPAR expression:e1 RPAR
                {:RESULT=e1; :}
                | boolean_expre:be
                {: RESULT=be; :}
                |logical_expre:le
                {:RESULT=le; :}  
 ; 

 literal_expre ::= FLOATN:num
                   {: RESULT = num;:} 
                   |INTEGERN:num1
                   {: RESULT = num1;:}
                   |STRINGCONT:s
                   {: RESULT= s;:} 
                    
 ;

 arit_expre ::= expression:e1 ADD expression:e2 
               {: System.out.println(e1+"+"+e2); :}  
               | expression:e1 MIN expression:e2 
               {: System.out.println(e1+"-"+e2); :}
               | expression:e1 MUL expression:e2
               {: System.out.println(e1+"*"+e2); :} 
               |expression:e1 DIV expression:e2
               {: System.out.println(e1+"/"+e2); :}  
               | expression:e1 POT expression:e2
               {: System.out.println(e1+"**"+e2); :}
               | MIN expression:e1
               {: System.out.println("-"+e1);:}
               %prec UMIN
               

 ;

 boolean_expre ::= expression:e1 LEQUAL expression:e2
                  {: System.out.println(e1+"<="+e2); :}
                  | expression:e1 GEQUAL expression:e2
                  {: System.out.println(e1+">="+e2); :}  
                  | expression:e1 DISTINCT expression:e2
                  {: System.out.println(e1+"/="+e2); :}
                  | expression:e1 GREATER expression:e2
                  {: System.out.println(e1+">"+e2); :}
                  | expression:e1 LESS expression:e2
                  {: System.out.println(e1+"<"+e2); :} 
                  | expression:e1 EQUAL expression:e2
                  {: System.out.println(e1+"="+e2); :} 
 ;

 logical_expre ::= expression:e1 AND expression:e2
                   {: System.out.println(e1+"and"+e2); :} 
                   | expression:e1 OR expression:e2
                   {: System.out.println(e1+"or"+e2);:}
                   | NOT expression:e1
                   {: System.out.println("not"+e1);:}
                   |TRUE
                   {: System.out.println("true");:}
                   |FALSE
                   {: System.out.println("false");:} 
 ;

 type ::= INTEGER
          {:System.out.println("integer");:} 
          |BOOLEAN
          {:System.out.println("boolean");:}
          |FLOAT
          {:System.out.println("float");:} 
 ;

 declare_expre ::= variable_list:e1 COLON type:e2
                   {: RESULT=e1;System.out.println(e1+ ":"+e2);:}
 ;
 variable_list::= ID:e1
                  {:RESULT=e1; System.out.println(e1);:} 
                  |variable_list:e1 COMMA ID:e2
                  {:System.out.println(e1+","+e2);:}

 ;                