package ada95compiler;

import java_cup.runtime.*;
import AST_TREE.*;

/* Lexer*/
  parser code {:
      AdaLexer lexer;

      private ProgramInit program;
      
      public void setProgram(ProgramInit program){
           this.program= program;
      }
      public ProgramInit getProgram(){
         return this.program;
      }

      public ParserAda(AdaLexer lex){
       super(lex);
       lexer = lex;
      }

      public void syntax_error(Symbol s) {
          report_error("", s);
      }

      public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error ");
        m.append(message);
        java_cup.runtime.Symbol s = null;
        if (info instanceof java_cup.runtime.Symbol) {
            s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" linea " + (s.left));

                if (s.right >= 0) {
                    m.append(", columna " + (s.right));
                }
            }

            if (s.value != null && !s.value.equals("")) {
                m.append(". No se esperaba el s√≠mbolo: '" + s.value + "'");            
           }
        }
        System.err.println(m);
      }
      
  :}



 /* Terminals */

 /* Types*/
  terminal        INTEGER,BOOLEAN,FLOAT;    

 /* Booleans*/
  terminal        TRUE,FALSE;

 /* arithmetic operations*/
  terminal        ADD,MIN,POT,MUL,DIV,UMIN; 
  
 /* logical expressions */
  terminal        AND,OR,NOT;

 /* I/O */
  terminal        GET,PUT;

 /* control structures */
  terminal        IF,THEN,ELSIF,ELSE,FOR,LOOP,EXIT,WHEN,WHILE;

 /* other symbols */
  terminal        COMMA,SEMICOLON,COLON,LPAR,RPAR,RANK;

 /* Blocks */
  terminal        PROCEDURE,IS,BEGIN,END,DECLARE;

 /* Functions*/
  terminal        FUNCTION,RETURN;

 /* variables */
  terminal String ID;

 /* Numbers */
  terminal Float   FLOATN;
  terminal Integer INTEGERN;

 /* Strings*/
  terminal String  STRINGCONT;

 
 /* Boolean operators*/
  terminal        LEQUAL,GEQUAL,DISTINCT,GREATER,LESS,EQUAL;
 
 /*  Assignment operator */
  terminal        ASSIGN;

 /* parameters */
  terminal        INOUT,IN,OUT;

 /* main */
  terminal        MAIN;  

 /* Non terminals*/
 non terminal  ArithmeticExpression    arit_expre;
 non terminal  Expression              expression; 
 non terminal  LiteralExpression       literal_expre;
 non terminal  BooleanExpression       boolean_expre;
 non terminal  LogicalExpression       logical_expre;
 non terminal  DeclareStatement        declare_expre;
 non terminal  VariableList            variable_list;
 non terminal  Type                    type; 
 non terminal  Statement               statement;
 non terminal  AssignmentStatement     assignment_expre;
 non terminal  IOStatement             io_expre;
 non terminal  FunctionCall            function_call;
 non terminal  ArgumentList            arguments_list;
 non terminal  IfStatement             if_statement;
 non terminal  ElsifStatements         elsif_statement;
 non terminal  WhileStatement          while_statement;
 non terminal  LoopStatement           loop_statement;
 non terminal  ExitStatement           exit_statement;
 non terminal  ForStatement            for_statement;
 non terminal  Statements              statements;
 non terminal  ProcedureStatement      procedure_statement;
 non terminal  ParamsList              params_list;
 non terminal  FunctionStatement       function_statement;
 non terminal  ReturnStatement         return_statement;
 non terminal                          program; 
 non terminal  DeclarationStatement    declaration_statement; 
 non terminal  Declarations            declarations;
 non terminal  ProgramInit             program_init;                  

/* precedence */
precedence left     AND,OR;
precedence left     LEQUAL,GEQUAL,GREATER,DISTINCT,LESS,EQUAL; 
precedence left     ADD,MIN;
precedence left     MUL,DIV;
precedence right    POT,NOT,UMIN; 
precedence nonassoc ELSE;

 /* CFG */

program ::= program_init:x
            {: setProgram(x); :} 
;

program_init ::= PROCEDURE ID:e1  IS declarations:e3 BEGIN statements:e4 END ID:e5 SEMICOLON
                 {: RESULT= new ProgramInit(new Identifier(e1),e3,e4,new Identifier(e5));:}
;

statements ::= statement:e1 statements:x
               {: x.addE(e1); RESULT=x;:}
               | /* vacio */
               {: RESULT= new Statements();:}
;

declarations ::= declaration_statement:e1
                 {:RESULT= new Declarations(); RESULT.addE(e1);:}
                 |declarations:x declaration_statement:y
                 {:x.addE(y); RESULT=x;:}
;                 

declaration_statement::= declare_expre:e1 
                         {: RESULT = e1;:}
                         | procedure_statement:e1 
                         {: RESULT=e1;:}
                         |function_statement:e1 
                         {: RESULT=e1;:}
;              

statement ::= expression:e1 SEMICOLON
              {:RESULT=e1;:}
              | assignment_expre:e1 
              {: RESULT=e1;:}
              | io_expre:e1 
              {: RESULT=e1;:}
              | if_statement:e1 
              {:RESULT=e1;:}
              | while_statement:e1 
              {: RESULT =e1;:}
              | exit_statement: e1 
              {: RESULT=e1; :}
              | loop_statement:e1 
              {: RESULT=e1; :}
              | for_statement:e1 
              {: RESULT=e1; :}
              | return_statement:e1 
              {: RESULT=e1;:}              
;

expression ::=  ID:id
                {: RESULT = new Identifier(id);:}   
                | literal_expre:le
                {: RESULT = le;:}  
                | arit_expre:ar
                {: RESULT = ar;:}
                | LPAR expression:e1 RPAR
                {:RESULT=e1; :}
                | boolean_expre:be
                {: RESULT=be; :}
                |logical_expre:le
                {:RESULT=le; :}
                |function_call:e1
                {:RESULT=e1; :}
 ; 

 literal_expre ::= FLOATN:num
                   {: RESULT = new FloatLiteral(num);:} 
                   |INTEGERN:num1
                   {: RESULT = new IntegerLiteral(num1);:}
                   |STRINGCONT:s
                   {: RESULT= new StringLiteral(s);:} 
                    
 ;

 arit_expre ::= expression:e1 ADD expression:e2 
               {: RESULT= new Add(e1,e2); :}  
               | expression:e1 MIN expression:e2 
               {: RESULT= new Min(e1,e2); :}
               | expression:e1 MUL expression:e2
               {: RESULT= new Mul(e1,e2); :} 
               |expression:e1 DIV expression:e2
               {: RESULT= new Div(e1,e2); :}  
               | expression:e1 POT expression:e2
               {: RESULT= new Power(e1,e2); :}
               | MIN expression:e1
               {: RESULT= new Umin(e1);:}
               %prec UMIN
               

 ;

 boolean_expre ::= expression:e1 LEQUAL expression:e2
                  {: RESULT= new LessEqual(e1,e2);:}
                  | expression:e1 GEQUAL expression:e2
                  {: RESULT= new GreaterEqual(e1,e2); :}  
                  | expression:e1 DISTINCT expression:e2
                  {: RESULT= new Distinct(e1,e2); :}
                  | expression:e1 GREATER expression:e2
                  {: RESULT= new Greater(e1,e2); :}
                  | expression:e1 LESS expression:e2
                  {: RESULT= new Less(e1,e2); :} 
                  | expression:e1 EQUAL expression:e2
                  {: RESULT= new Equal(e1,e2); :}
 ;

 logical_expre ::= expression:e1 AND expression:e2
                   {: RESULT= new And(e1,e2);:} 
                   | expression:e1 OR expression:e2
                   {: RESULT= new Or(e1,e2);:}
                   | NOT expression:e1
                   {: RESULT= new Not(e1);:}
                   |TRUE
                   {: RESULT= new TrueType();:}
                   |FALSE
                   {: RESULT = new FalseType();:} 
 ;

 type ::= INTEGER
          {:RESULT = new IntegerType();:} 
          |BOOLEAN
          {:RESULT = new BooleanType();:}
          |FLOAT
          {:RESULT = new FloatType();:} 
 ;

 declare_expre ::= variable_list:e1 COLON type:e2 SEMICOLON
                   {: RESULT=new DeclareStatement(e1,e2);:}
                   |variable_list:e1 COLON type:e2 error
                   {: System.err.println("ERROR: se esperaba <;>"); :}
 ;

 variable_list::= ID:e1
                  {: RESULT= new VariableList(); RESULT.addE(new Identifier(e1));:} 
                  |variable_list:e1 COMMA ID:e2
                  {:e1.addE(new Identifier(e2)); RESULT=e1;:}
 ;

 assignment_expre ::= ID:e1 ASSIGN expression:e3  SEMICOLON
                      {:RESULT= new AssignmentStatement(new Identifier(e1),e3);:}
                      |ID:e1 ASSIGN error SEMICOLON
                      {: System.err.println("ERROR:expresion no valida");:}
                      |ID:e1 EQUAL error expression:e3 SEMICOLON
                      {: System.err.println("ERROR: no se esperaba < = >");:}
                      |ID:e1 ASSIGN expression:e3  error
                      {: System.err.println("ERROR: se esperaba <;>");:}
                      |declare_expre:e1 ASSIGN expression:e3 error
                      {: System.err.println("ERROR: se esperaba <;>");:}
 ;

 io_expre ::= GET LPAR ID:e1 RPAR SEMICOLON
              {: RESULT= new Get(new Identifier(e1));:}
              | PUT LPAR expression:e1 RPAR SEMICOLON
              {: RESULT= new Put(e1);:}
              | PUT LPAR expression:e1 error
              {: System.err.println("ERROR: falta parentesis"); :}
              |GET LPAR ID:e1 error
              {: System.err.println("ERROR: falta parentesis"); :}
              |GET LPAR error RPAR
              {: System.err.println("ERROR: se esperaba <identificador>");:}
              |PUT LPAR error RPAR
              {: System.err.println("ERROR: expresion no valida"); :}
              |GET LPAR ID:e1 RPAR error
              {: System.err.println("ERROR: se esperaba <;>");:}
              |PUT LPAR expression:e1 RPAR error
              {: System.err.println("ERROR: se esperaba <;>");:}
 ;

 function_call ::= ID:e1 LPAR arguments_list:e2 RPAR
                   {:RESULT = new FunctionCall(new Identifier(e1),e2);:}
                   |ID:e1 LPAR RPAR 
                   {: RESULT = new FunctionCall(new Identifier(e1)); :}
                   |ID:e1 LPAR arguments_list:e2 error
                   {: System.err.println("Falta parentesis");:} 
 ;

 arguments_list ::= expression:e1
                    {: RESULT= new ArgumentList(); RESULT.addE(e1);:}
                    |arguments_list:e1 COMMA expression:e2
                    {: e1.addE(e2); RESULT= e1;:} 
 ;

 if_statement ::= IF expression:e1 THEN statements:e2 END IF SEMICOLON
                  {: RESULT =  new IfStatement(e1, e2); :} 
                  | IF error THEN statements:e2 END IF SEMICOLON
                  {: System.err.println("ERROR: expresion no valida en if"); :}
                  | IF expression:e1 error statements:e2 END IF SEMICOLON
                  {: System.err.println("ERROR: if sin then"); :}
                  | IF expression:e1 THEN statements:e2 elsif_statement:e3 END IF SEMICOLON
                  {: RESULT =  new IfStatement(e1, e2, e3);  :}
                  |IF error THEN statements:e2 elsif_statement:e3 END IF SEMICOLON
                  {: System.err.println("ERROR: expresion no valida en if");:}
                  |IF expression:e1 error statements:e2 elsif_statement:e3 END IF SEMICOLON
                  {: System.err.println("ERROR: if sin then");:}
                  | IF expression:e1 THEN statements:e2 ELSE statements:e3 END IF SEMICOLON
                  {: RESULT =  new IfStatement(e1, e2, e3); :}
                  | IF error THEN statements:e2 ELSE statements:e3 END IF SEMICOLON
                  {: System.err.println("ERROR: expresion no valida en if"); :}
                  | IF expression:e1 error statements:e2 ELSE statements:e3 END IF SEMICOLON
                  {: System.err.println("ERROR: if sin then"); :}
                  | IF expression:e1 THEN statements:e2 elsif_statement:e3  ELSE statements:e4 END IF SEMICOLON
                  {: RESULT =  new IfStatement(e1, e2, e3, e4); :}
                  | IF error THEN statements:e2 elsif_statement:e3  ELSE statements:e4 END IF SEMICOLON
                  {: System.err.println("ERROR: expresion no valida en if");:}
                  |IF expression:e1 error statements:e2 elsif_statement:e3  ELSE statements:e4 END IF SEMICOLON
                  {: System.err.println("ERROR: if sin then");:} 
                  |IF expression:e1 THEN statements:e2 END IF error
                  {: System.err.println("ERROR: se esperaba <;>");:}
                  |IF expression:e1 THEN statements:e2 elsif_statement:e3 END IF error
                  {: System.err.println("ERROR: se esperaba <;>");:}
                  |IF expression:e1 THEN statements:e2 ELSE statements:e3 END IF error
                  {: System.err.println("ERROR: se esperaba <;>");:}
                  |IF expression:e1 THEN statements:e2 elsif_statement:e3  ELSE statements:e4 END IF error
                  {: System.err.println("ERROR: se esperaba <;>");:}


;

 elsif_statement ::= ELSIF expression:e1 THEN statements:e2 elsif_statement:e3
                     {:e3.addE(new ElseIfStatement(e1,e2)); RESULT=e3; :}
                     | ELSIF expression:e1 THEN statements:e2
                     {:RESULT= new ElsifStatements(); RESULT.addE(new ElseIfStatement(e1,e2)); :}
                     | ELSIF expression:e1 error statements:e2
                     {: System.err.println("ERROR: elsif sin then");:}
                     | ELSIF error THEN statements:e2
                     {: System.err.println("ERROR: expresion no valida en if"); :}
 ;

 while_statement ::= WHILE expression:e1 LOOP statements:e2 END LOOP SEMICOLON
                     {: RESULT =  new WhileStatement(e1, e2); :}
                     |WHILE error:e1 LOOP statements:e2 END LOOP SEMICOLON
                     {:RESULT = new WhileStatementError(e1right,e1left,"ERROR: expresion no valida en while");
                     System.err.println("ERROR: expresion no valida en while"); :}
                     |WHILE expression:e1 error:e3 statements:e2 END LOOP SEMICOLON
                     {:RESULT = new WhileStatementError(e3right,e3left,"ERROR: while sin loop"); 
                     System.err.println("ERROR: while sin loop"); :}
                     |WHILE expression:e1 LOOP statements:e2 END LOOP error:e3
                     {: RESULT = new WhileStatementError(e3right,e3left,"ERROR: se esperaba <;> "); 
                     System.err.println("ERROR: se esperaba <;> ");:}
 ;

 exit_statement ::= EXIT WHEN expression:e1 SEMICOLON
                    {: RESULT =  new ExitStatement(e1); :}
                    |EXIT WHEN expression:e1 error:e2
                    {: RESULT= new ExitStatementError(e2right,e2left,"ERROR: se esperaba <;> ");
                    System.err.println("ERROR: se esperaba <;> "); :}
 ;

 loop_statement ::= LOOP statements:e1 END LOOP SEMICOLON
                    {: RESULT =  new LoopStatement(e1); :}
                    |LOOP statements:e1 END LOOP error
                    {: System.err.println("ERROR: se esperaba <;> ");:}
 ;

 for_statement ::= FOR ID:e1 IN expression:e2 RANK expression:e3 LOOP statements:e4 END LOOP SEMICOLON
                   {: RESULT =  new ForStatement(new Identifier(e1), e2, e3, e4); :} 
                   |FOR ID:e1 IN expression:e2 RANK expression:e3 LOOP statements:e4 END LOOP error
                   {: System.err.println("ERROR: se esperaba <;> ");:}
                   |FOR ID:e1 IN expression:e2 RANK expression:e3 error statements:e4 END LOOP SEMICOLON
                   {: System.err.println("ERROR: for sin loop"); :}
 ;

 procedure_statement ::= PROCEDURE ID:e1 LPAR params_list:e2 RPAR IS declarations:e3 BEGIN statements:e4 END ID:e5 SEMICOLON
                         {: RESULT = new ProcedureStatement(new Identifier(e1), e2,e3,e4,new Identifier(e5)); :}
                         | PROCEDURE ID:e1  IS declarations:e3 BEGIN statements:e4 END ID:e5 SEMICOLON
                         {:RESULT = new ProcedureStatement(new Identifier(e1),e3,e4,new Identifier(e5));:}
                         | PROCEDURE ID:e1 LPAR params_list:e2 RPAR IS declarations:e3 BEGIN statements:e4 END ID:e5 error
                         {: System.err.println("ERROR: se esperaba <;> ");:}
                         | PROCEDURE ID:e1  IS declarations:e3 BEGIN statements:e4 END ID:e5 error
                         {: System.err.println("ERROR: se esperaba <;> ");:}
                         |PROCEDURE ID:e1 LPAR params_list:e2 RPAR error declarations:e3 BEGIN statements:e4 END ID:e5 SEMICOLON
                         {: System.err.println("ERROR: procedure sin is ");:}
                         |PROCEDURE ID:e1  error declarations:e3 BEGIN statements:e4 END ID:e5 SEMICOLON
                         {: System.err.println("ERROR: procedure sin is ");:}
                         |PROCEDURE ID:e1 LPAR params_list:e2 RPAR IS declarations:e3 BEGIN statements:e4 END error SEMICOLON
                         {: System.err.println("ERROR: se esperaba un <identificador>"); :}
                         |PROCEDURE ID:e1  IS declarations:e3 BEGIN statements:e4 END error SEMICOLON
                         {:System.err.println("ERROR: se esperaba un <identificador>");:}
                         |PROCEDURE ID:e1 LPAR error RPAR IS declarations:e3 BEGIN statements:e4 END ID:e5 SEMICOLON
                         {: System.err.println("ERROR: parametros de procedure no validos") ; :}
                         |PROCEDURE ID:e1 LPAR params_list:e2 RPAR IS declarations:e3 BEGIN statements:e4 error ID:e5 SEMICOLON
                         {: System.err.println("ERROR: begin sin end en procedure") ;:}
                         |PROCEDURE ID:e1  IS declarations:e3 BEGIN statements:e4 error ID:e5 SEMICOLON
                         {: System.err.println("ERROR: begin sin end en procedure") ; :}
 ;

 params_list ::=  variable_list:e1 COLON IN type:e2 
                  {:RESULT= new ParamsList(); RESULT.addE(new In(e1,e2));:}
                  |variable_list:e1 COLON OUT type:e2 
                  {: RESULT= new ParamsList(); RESULT.addE(new Out(e1,e2)); :}
                  |variable_list:e1 COLON INOUT type:e2 
                  {:RESULT= new ParamsList(); RESULT.addE(new InOut(e1,e2)); :}
                  |params_list:e3 SEMICOLON variable_list:e1 COLON IN type:e2 
                  {: e3.addE(new In(e1,e2)); RESULT=e3; :}
                  |params_list:e3 SEMICOLON variable_list:e1 COLON OUT type:e2 
                  {: e3.addE(new Out(e1,e2)); RESULT=e3; :}
                  |params_list:e3 SEMICOLON variable_list:e1 COLON INOUT type:e2 
                  {: e3.addE(new InOut(e1,e2)); RESULT=e3; :}   
 ;

 function_statement ::= FUNCTION ID:e1 LPAR params_list:e2 RPAR RETURN type:e3 IS declarations:e4 BEGIN statements:e5 END ID:e6 SEMICOLON
                        {:RESULT= new FunctionStatement(new Identifier(e1),new Identifier(e6),e2,e4,e5,e3); :}
                        |FUNCTION ID:e1 RETURN type:e3 IS declarations:e4 BEGIN statements:e5 END ID:e6 SEMICOLON
                        {:RESULT= new FunctionStatement(new Identifier(e1),new Identifier(e6),e4,e5,e3);:}
                        |FUNCTION ID:e1 LPAR params_list:e2 RPAR RETURN type:e3 IS declarations:e4 BEGIN statements:e5 END ID:e6 error
                        {: System.err.println("ERROR: se esperaba <;> ");:}
                        |FUNCTION ID:e1 RETURN type:e3 IS declarations:e4 BEGIN statements:e5 END ID:e6 error
                        {: System.err.println("ERROR: se esperaba <;> ");:}
                        |FUNCTION ID:e1 LPAR params_list:e2 RPAR RETURN type:e3 error declarations:e4 BEGIN statements:e5 END ID:e6 SEMICOLON
                        {: System.err.println("ERROR: function sin is") ;:}
                        |FUNCTION ID:e1 RETURN type:e3 error declarations:e4 BEGIN statements:e5 END ID:e6 SEMICOLON
                        {: System.err.println("ERROR: function sin is") ;:}
                        |FUNCTION ID:e1 LPAR params_list:e2 RPAR RETURN type:e3 IS declarations:e4 BEGIN statements:e5 END error SEMICOLON
                        {: System.err.println("ERROR: se esperaba <identificador>") ; :}
                        |FUNCTION ID:e1 RETURN type:e3 IS declarations:e4 BEGIN statements:e5 END error SEMICOLON
                        {: System.err.println("ERROR: se esperaba <identificador>") ; :}
                        |FUNCTION ID:e1 LPAR error RPAR RETURN type:e3 IS declarations:e4 BEGIN statements:e5 END ID:e6 SEMICOLON
                        {: System.err.println("ERROR: parametros de function no validos") ; :}
                        |FUNCTION ID:e1 LPAR params_list:e2 RPAR RETURN type:e3 IS declarations:e4 BEGIN statements:e5 error ID:e6 SEMICOLON
                        {: System.err.println("ERROR: begin sin end en function") ; :}
                        |FUNCTION ID:e1 RETURN type:e3 IS declarations:e4 BEGIN statements:e5 error ID:e6 SEMICOLON
                        {: System.err.println("ERROR: begin sin end en function") ; :}
;

 return_statement ::= RETURN expression:e1 SEMICOLON
                      {: RESULT= new ReturnStatement(e1);:}
                      |RETURN expression:e1 error
                      {: System.err.println("ERROR: se esperaba <;> ");:}
                      |RETURN error SEMICOLON
                      {: System.err.println("ERROR: expresion no valida"); :}
 ;