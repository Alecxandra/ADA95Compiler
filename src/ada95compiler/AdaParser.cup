package ada95compiler;

import java_cup.runtime.*;
import AST_TREE.*;

/* Lexer*/
  parser code {:
      AdaLexer lexer;

      private ProgramInit program;
      
      public void setProgram(ProgramInit program){
           this.program= program;
      }
      public ProgramInit getProgram(){
         return this.program;
      }

      public ParserAda(AdaLexer lex){
       super(lex);
       lexer = lex;
      }

      public void syntax_error(Symbol s) {
          //report_error("", s);
      }

      public void unrecovered_syntax_error(Symbol s){
         System.err.println("Oh! No, revisa antes de la linea: " + (s.left + 1) + ", columna: " + (s.right + 1));
      } 

      public void report_falta_error(String message, Object info){

      }
      

      public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("ERROR: ");
        m.append(message);
        java_cup.runtime.Symbol s = null;
        if (info instanceof java_cup.runtime.Symbol) {
            s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append("linea: " + (s.left));

                if (s.right >= 0) {
                    m.append(", columna: " + (s.right));
                }
            }

        }
        System.err.print(m + " || ");
      }
      
  :}



 /* Terminals */

 /* Types*/
  terminal        INTEGER,BOOLEAN,FLOAT;    

 /* Booleans*/
  terminal        TRUE,FALSE;

 /* arithmetic operations*/
  terminal        ADD,MIN,POT,MUL,DIV,UMIN; 
  
 /* logical expressions */
  terminal        AND,OR,NOT;

 /* I/O */
  terminal        GET,PUT;

 /* control structures */
  terminal        IF,THEN,ELSIF,ELSE,FOR,LOOP,EXIT,WHEN,WHILE;

 /* other symbols */
  terminal        COMMA,SEMICOLON,COLON,LPAR,RPAR,RANK;

 /* Blocks */
  terminal        PROCEDURE,IS,BEGIN,END,DECLARE;

 /* Functions*/
  terminal        FUNCTION,RETURN;

 /* variables */
  terminal String ID;

 /* Numbers */
  terminal Float   FLOATN;
  terminal Integer INTEGERN;

 /* Strings*/
  terminal String  STRINGCONT;

 
 /* Boolean operators*/
  terminal        LEQUAL,GEQUAL,DISTINCT,GREATER,LESS,EQUAL;
 
 /*  Assignment operator */
  terminal        ASSIGN;

 /* parameters */
  terminal        INOUT,IN,OUT;

 /* main */
  terminal        MAIN;  

 /* Non terminals*/
 non terminal  ArithmeticExpression    arit_expre;
 non terminal  Expression              expression; 
 non terminal  LiteralExpression       literal_expre;
 non terminal  BooleanExpression       boolean_expre;
 non terminal  LogicalExpression       logical_expre;
 non terminal  DeclareStatement        declare_expre;
 non terminal  VariableList            variable_list;
 non terminal  Type                    type; 
 non terminal  Statement               statement;
 non terminal  AssignmentStatement     assignment_expre;
 non terminal  IOStatement             io_expre;
 non terminal  FunctionCall            function_call;
 non terminal  ArgumentList            arguments_list;
 non terminal  IfStatement             if_statement;
 non terminal  ElsifStatements         elsif_statement;
 non terminal  WhileStatement          while_statement;
 non terminal  LoopStatement           loop_statement;
 non terminal  ExitStatement           exit_statement;
 non terminal  ForStatement            for_statement;
 non terminal  Statements              statements;
 non terminal  ProcedureStatement      procedure_statement;
 non terminal  ParamsList              params_list;
 non terminal  FunctionStatement       function_statement;
 non terminal  ReturnStatement         return_statement;
 non terminal                          program; 
 non terminal  DeclarationStatement    declaration_statement; 
 non terminal  Declarations            declarations;
 non terminal  ProgramInit             program_init;                  

/* precedence */
precedence left     AND,OR;
precedence left     LEQUAL,GEQUAL,GREATER,DISTINCT,LESS,EQUAL; 
precedence left     ADD,MIN;
precedence left     MUL,DIV;
precedence right    POT,NOT,UMIN; 
precedence nonassoc ELSE;

 /* CFG */

program ::= program_init:x
            {: setProgram(x); :} 
;

program_init ::= PROCEDURE ID:e1  IS declarations:e3 BEGIN statements:e4 END ID:e5 SEMICOLON
                 {: RESULT= new ProgramInit(new Identifier(e1),e3,e4,new Identifier(e5));:}
                 |PROCEDURE ID:e1  error:e6 declarations:e3 BEGIN statements:e4 END ID:e5 SEMICOLON
                 {: RESULT= new ProgramInitError(e6right, e6left,"ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"procedure sin is ",e4,e3); System.err.println("ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"procedure sin is ");:}
                 |PROCEDURE ID:e1  IS declarations:e3 BEGIN statements:e4 END ID:e5 error:e6
                 {: RESULT= new ProgramInitError(e6right, e6left,"ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"se esperaba <;> ",e4,e3); System.err.println("ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"se esperaba <;> ");:}
                 |PROCEDURE ID:e1  IS declarations:e3 BEGIN statements:e4 error:e6 ID:e5 SEMICOLON
                 {:RESULT= new ProgramInitError(e6right,e6left,"ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"begin sin end en procedure",e4,e3); System.err.println("ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"begin sin end en procedure") ; :}
                 |PROCEDURE ID:e1  IS declarations:e3 BEGIN statements:e4 END error:e5 SEMICOLON
                 {:RESULT= new ProgramInitError(e5right,e5left,"ERROR: "+"linea: "+e5left+" , columna: "+e5right+" || "+"se esperaba un <identificador>",e4,e3); System.err.println("ERROR: "+"linea: "+e5left+" , columna: "+e5right+" || "+"se esperaba un <identificador>");:}
;

statements ::= statement:e1 statements:x
               {: x.addE(e1); RESULT=x;:}
               | /* vacio */
               {: RESULT= new Statements();:}
;

declarations ::= declaration_statement:e1
                 {:RESULT= new Declarations(); RESULT.addE(e1);:}
                 |declarations:x declaration_statement:y
                 {:x.addE(y); RESULT=x;:}
;                 

declaration_statement::= declare_expre:e1 
                         {: RESULT = e1; RESULT.setLine(e1left); RESULT.setColumn(e1right); :} 
                         | procedure_statement:e1 
                         {: RESULT=e1;:}
                         |function_statement:e1 
                         {: RESULT=e1; RESULT.setLine(e1left); RESULT.setColumn(e1right); :}
;              

statement ::= expression:e1 SEMICOLON
              {:RESULT=e1; RESULT.setLine(e1left); RESULT.setColumn(e1right); :}
              | assignment_expre:e1 
              {: RESULT=e1; RESULT.setLine(e1left); RESULT.setColumn(e1right); :}
              | io_expre:e1 
              {: RESULT=e1; RESULT.setLine(e1left); RESULT.setColumn(e1right); :}
              | if_statement:e1 
              {:RESULT=e1; RESULT.setLine(e1left); RESULT.setColumn(e1right); :}
              | while_statement:e1 
              {: RESULT =e1; RESULT.setLine(e1left); RESULT.setColumn(e1right); :}
              | exit_statement: e1 
              {: RESULT=e1; RESULT.setLine(e1left); RESULT.setColumn(e1right); :}
              | loop_statement:e1 
              {: RESULT=e1; RESULT.setLine(e1left); RESULT.setColumn(e1right); :}
              | for_statement:e1 
              {: RESULT=e1; RESULT.setLine(e1left); RESULT.setColumn(e1right); :}
              | return_statement:e1 
              {: RESULT=e1; RESULT.setLine(e1left); RESULT.setColumn(e1right); :}              
;

expression ::=  ID:id
                {: RESULT = new Identifier(id); RESULT.setLine(idleft); RESULT.setColumn(idright); :}   
                | literal_expre:le
                {: RESULT = le; RESULT.setLine(leleft); RESULT.setColumn(leright); :}  
                | arit_expre:ar
                {: RESULT = ar; RESULT.setLine(arleft); RESULT.setColumn(arright); :}
                | LPAR expression:e1 RPAR
                {:RESULT=e1; RESULT.setLine(e1left); RESULT.setColumn(e1right); :}
                | boolean_expre:be
                {: RESULT=be; RESULT.setLine(beleft); RESULT.setColumn(beright); :}
                |logical_expre:le
                {:RESULT=le; RESULT.setLine(leleft); RESULT.setColumn(leright); :}
                |function_call:e1
                {:RESULT=e1; RESULT.setLine(e1left); RESULT.setColumn(e1right); :}
 ; 

 literal_expre ::= FLOATN:num
                   {: RESULT = new FloatLiteral(num); RESULT.setLine(numleft); RESULT.setColumn(numright); :} 
                   |INTEGERN:num1
                   {: RESULT = new IntegerLiteral(num1); RESULT.setLine(num1left); RESULT.setColumn(num1right); :}
                   |STRINGCONT:ws
                   {: RESULT= new StringLiteral(ws); RESULT.setLine(wsleft); RESULT.setColumn(wsright); :} 
                    
 ;

 arit_expre ::= expression:e1 ADD:a1 expression:e2 
               {: RESULT= new Add(e1,e2); RESULT.setLine(a1left); RESULT.setColumn(a1right); :}  
               | expression:e1 MIN:min1 expression:e2 
               {: RESULT= new Min(e1,e2); RESULT.setLine(min1left); RESULT.setColumn(min1right); :}
               | expression:e1 MUL:mul1 expression:e2
               {: RESULT= new Mul(e1,e2); RESULT.setLine(mul1left); RESULT.setColumn(mul1right); :} 
               |expression:e1 DIV:div1 expression:e2
               {: RESULT= new Div(e1,e2); RESULT.setLine(div1left); RESULT.setColumn(div1right); :}  
               | expression:e1 POT:pot1 expression:e2
               {: RESULT= new Power(e1,e2); RESULT.setLine(pot1left); RESULT.setColumn(pot1right); :}
               | MIN:min2 expression:e1
               {: RESULT= new Umin(e1); RESULT.setLine(min2left); RESULT.setColumn(min2right); :}
               %prec UMIN
 ;

 boolean_expre ::= expression:e1 LEQUAL:le1 expression:e2
                  {: RESULT= new LessEqual(e1,e2); RESULT.setLine(le1left); RESULT.setColumn(le1right); :}
                  | expression:e1 GEQUAL:ge1 expression:e2
                  {: RESULT= new GreaterEqual(e1,e2); RESULT.setLine(ge1left); RESULT.setColumn(ge1right); :}  
                  | expression:e1 DISTINCT:di1 expression:e2
                  {: RESULT= new Distinct(e1,e2); RESULT.setLine(di1left); RESULT.setColumn(di1right); :}
                  | expression:e1 GREATER:gr1 expression:e2
                  {: RESULT= new Greater(e1,e2); RESULT.setLine(gr1left); RESULT.setColumn(gr1right); :}
                  | expression:e1 LESS:les1 expression:e2
                  {: RESULT= new Less(e1,e2); RESULT.setLine(les1left); RESULT.setColumn(les1right); :} 
                  | expression:e1 EQUAL:eq1 expression:e2
                  {: RESULT= new Equal(e1,e2); RESULT.setLine(eq1left); RESULT.setColumn(eq1right); :}
 ;

 logical_expre ::= expression:e1 AND:wa expression:e2
                   {: RESULT= new And(e1,e2); RESULT.setLine(waleft); RESULT.setColumn(waright); :} 
                   | expression:e1 OR:wo expression:e2
                   {: RESULT= new Or(e1,e2); RESULT.setLine(woleft); RESULT.setColumn(woright); :}
                   | NOT:wn expression:e1
                   {: RESULT= new Not(e1); RESULT.setLine(wnleft); RESULT.setColumn(wnright); :}
                   |TRUE:wr
                   {: RESULT= new TrueType(); RESULT.setLine(wrleft); RESULT.setColumn(wrright); :}
                   |FALSE:wf
                   {: RESULT = new FalseType(); RESULT.setLine(wfleft); RESULT.setColumn(wfright); :} 
 ;

 type ::= INTEGER:wi
          {:RESULT = new IntegerType(); RESULT.setLine(wileft); RESULT.setColumn(wiright); :} 
          |BOOLEAN:wb
          {:RESULT = new BooleanType(); RESULT.setLine(wbleft); RESULT.setColumn(wbright); :}
          |FLOAT:wf
          {:RESULT = new FloatType(); RESULT.setLine(wfleft); RESULT.setColumn(wfright); :} 
 ;

 declare_expre ::= variable_list:e1 COLON type:e2 SEMICOLON
                   {: RESULT=new DeclareStatement(e1,e2);:}
                   |variable_list:e1 error:e3 type:e2 SEMICOLON
                   {: RESULT= new DeclareStatementError(e3right,e3left,"ERROR: "+"linea: "+e3left+" , columna: "+e3right+" || "+"se esperaba <:>"); System.err.println("ERROR: "+"linea: "+e3left+" , columna: "+e3right+" || "+"se esperaba <:>"); :}
                   |variable_list:e1 COLON type:e2 error:e3
                   {: RESULT= new DeclareStatementError(e3right,e3left,"ERROR: "+"linea: "+e3left+" , columna: "+e3right+" || "+"se esperaba <;>"); System.err.println("ERROR: "+"linea: "+e3left+" , columna: "+e3right+" || "+"se esperaba <;>"); :}
 ;

 variable_list::= ID:e1
                  {: RESULT= new VariableList(); RESULT.addE(new Identifier(e1));:} 
                  |variable_list:e1 COMMA ID:e2
                  {:e1.addE(new Identifier(e2)); RESULT=e1;:}
 ;

 assignment_expre ::= ID:e1 ASSIGN:wa expression:e3  SEMICOLON
                      {:RESULT= new AssignmentStatement(new Identifier(e1),e3); RESULT.setLine(waleft); RESULT.setColumn(waright); :}
                      |ID:e1 ASSIGN:wa error:e2 SEMICOLON
                      {: RESULT= new AssignmentStatementError(e2right,e2left,"ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"expresion no valida"); System.err.println("ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"expresion no valida"); RESULT.setLine(waleft); RESULT.setColumn(waright); :}
                      |ID:e1 EQUAL:we error:e2 expression:e3 SEMICOLON
                      {: RESULT= new AssignmentStatementError(e2right,e2left,"ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"se esperaba < := >"); System.err.println("ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"se esperaba < := >"); RESULT.setLine(weleft); RESULT.setColumn(weright); :}
                      |ID:e1 ASSIGN:wa expression:e3  error:e4
                      {: RESULT= new AssignmentStatementError(e4right,e4left,"ERROR: "+"linea: "+e4left+" , columna: "+e4right+" || "+"se esperaba <;>"); System.err.println("ERROR: "+"linea: "+e4left+" , columna: "+e4right+" || "+"se esperaba <;>");  RESULT.setLine(waleft); RESULT.setColumn(waright); :}
 ;

 io_expre ::= GET:wg LPAR ID:e1 RPAR SEMICOLON
              {: RESULT= new Get(new Identifier(e1)); RESULT.setLine(wgleft); RESULT.setColumn(wgright); :}
              | PUT:wp LPAR expression:e1 RPAR SEMICOLON
              {: RESULT= new Put(e1); RESULT.setLine(wpleft); RESULT.setColumn(wpright); :}
              | PUT:wp LPAR expression:e1 error:e2 SEMICOLON
              {: RESULT= new PutError(e2right,e2left,"ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"falta parentesis"); System.err.println("ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"falta parentesis"); RESULT.setLine(wpleft); RESULT.setColumn(wpright); :}
              | GET:wg LPAR ID:e1 error:e2 SEMICOLON
              {: RESULT= new GetError(e2right,e2left,"ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"falta parentesis"); System.err.println("ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"falta parentesis"); RESULT.setLine(wgleft); RESULT.setColumn(wgright); :}
              | GET:wg LPAR error:e1 RPAR SEMICOLON
              {: RESULT= new GetError(e1right,e1left,"ERROR: "+"linea: "+e1left+" , columna: "+e1right+" || "+"se esperaba <identificador>"); System.err.println("ERROR: "+"linea: "+e1left+" , columna: "+e1right+" || "+"se esperaba <identificador>"); RESULT.setLine(wgleft); RESULT.setColumn(wgright); :}
              | PUT:wp LPAR error:e1 RPAR SEMICOLON
              {: RESULT= new PutError(e1right,e1left,"ERROR: "+"linea: "+e1left+" , columna: "+e1right+" || "+"expresion no valida"); System.err.println("ERROR: "+"linea: "+e1left+" , columna: "+e1right+" || "+"expresion no valida"); RESULT.setLine(wpleft); RESULT.setColumn(wpright); :}
              | GET:wg LPAR ID:e1 RPAR error:e2
              {: RESULT= new GetError(e2right,e2left,"ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"se esperaba <;>"); System.err.println("ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"se esperaba <;>"); RESULT.setLine(wgleft); RESULT.setColumn(wgright); :}
              | PUT:wp LPAR expression:e1 RPAR error:e2
              {: RESULT= new PutError(e2right,e2left,"ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"se esperaba <;>"); System.err.println("ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"se esperaba <;>"); RESULT.setLine(wpleft); RESULT.setColumn(wpright); :}
 ;

 function_call ::= ID:e1 LPAR arguments_list:e2 RPAR
                   {:RESULT = new FunctionCall(new Identifier(e1),e2);:}
                   |ID:e1 LPAR RPAR 
                   {: RESULT = new FunctionCall(new Identifier(e1)); :}
                   |ID:e1 LPAR arguments_list:e2 error:e3
                   {: RESULT= new FunctionCallError(e3right,e3left,"ERROR: "+"linea: "+e3left+" , columna: "+e3right+" || "+"Falta parentesis"); System.err.println("ERROR: "+"linea: "+e3left+" , columna: "+e3right+" || "+"Falta parentesis");:} 
 ;

 arguments_list ::= expression:e1
                    {: RESULT= new ArgumentList(); RESULT.addE(e1);:}
                    |arguments_list:e1 COMMA expression:e2
                    {: e1.addE(e2); RESULT= e1;:} 
 ;

 if_statement ::= IF:wif expression:e1 THEN statements:e2 END IF SEMICOLON
                  {: RESULT =  new IfStatement(e1, e2); RESULT.setLine(wifleft); RESULT.setColumn(wifright); :} 
                  | IF:wif error:e1 THEN statements:e2 END IF SEMICOLON
                  {: RESULT= new IfStatementError(e1right,e1left,"ERROR: "+"linea: "+e1left+" , columna: "+e1right+" || "+"expresion no valida en if",e2); System.err.println("ERROR: "+"linea: "+e1left+" , columna: "+e1right+" || "+"expresion no valida en if"); RESULT.setLine(wifleft); RESULT.setColumn(wifright); :}
                  | IF:wif expression:e1 error:e3 statements:e2 END IF SEMICOLON
                  {: RESULT= new IfStatementError(e3right,e3left,"ERROR: "+"linea: "+e3left+" , columna: "+e3right+" || "+"if sin then",e2); System.err.println("ERROR: "+"linea: "+e3left+" , columna: "+e3left+" || "+"if sin then"); RESULT.setLine(wifleft); RESULT.setColumn(wifright); :}
                  | IF:wif expression:e1 THEN statements:e2 elsif_statement:e3 END IF SEMICOLON
                  {: RESULT =  new IfStatement(e1, e2, e3); RESULT.setLine(wifleft); RESULT.setColumn(wifright); :}
                  | IF:wif error:e1 THEN statements:e2 elsif_statement:e3 END IF SEMICOLON
                  {: RESULT= new IfStatementError(e1right,e1left,"ERROR: "+"linea: "+e1left+" , columna: "+e1right+" || "+"expresion no valida en if",e2,e3); System.err.println("ERROR: "+"linea: "+e1right+" , columna: "+e1right+" || "+"expresion no valida en if"); RESULT.setLine(wifleft); RESULT.setColumn(wifright); :}
                  | IF:wif expression:e1 error:e4 statements:e2 elsif_statement:e3 END IF SEMICOLON
                  {: RESULT= new IfStatementError(e4right,e4left,"ERROR: "+"linea: "+e4left+" , columna: "+e4right+" || "+"if sin then",e2,e3); System.err.println("ERROR: "+"linea: "+e4left+" , columna: "+e4right+" || "+"if sin then"); RESULT.setLine(wifleft); RESULT.setColumn(wifright); :}
                  | IF:wif expression:e1 THEN statements:e2 ELSE statements:e3 END IF SEMICOLON
                  {: RESULT =  new IfStatement(e1, e2, e3); RESULT.setLine(wifleft); RESULT.setColumn(wifright); :}
                  | IF:wif error:e1 THEN statements:e2 ELSE statements:e3 END IF SEMICOLON
                  {: RESULT= new IfStatementError(e1right,e1left,"ERROR: "+"linea: "+e1left+" , columna: "+e1right+" || "+"expresion no valida en if",e2,e3); System.err.println("ERROR: "+"linea: "+e1right+" , columna: "+e1right+" || "+"expresion no valida en if"); RESULT.setLine(wifleft); RESULT.setColumn(wifright); :}
                  | IF:wif expression:e1 error:e4 statements:e2 ELSE statements:e3 END IF SEMICOLON
                  {: RESULT= new IfStatementError(e4right,e4left,"ERROR: "+"linea: "+e4left+" , columna: "+e4right+" || "+"if sin then",e2,e3); System.err.println("ERROR: "+"linea: "+e4left+" , columna: "+e4right+" || "+"if sin then"); RESULT.setLine(wifleft); RESULT.setColumn(wifright); :}
                  | IF:wif expression:e1 THEN statements:e2 elsif_statement:e3  ELSE statements:e4 END IF SEMICOLON
                  {: RESULT =  new IfStatement(e1, e2, e3, e4); RESULT.setLine(wifleft); RESULT.setColumn(wifright); :}
                  | IF:wif error:e1 THEN statements:e2 elsif_statement:e3  ELSE statements:e4 END IF SEMICOLON
                  {: RESULT= new IfStatementError(e1right,e1left,"ERROR: "+"linea: "+e1left+" , columna: "+e1right+" || "+"expresion no valida en if",e2,e3,e4); System.err.println("ERROR: "+"linea: "+e1right+" , columna: "+e1right+" || "+"expresion no valida en if"); RESULT.setLine(wifleft); RESULT.setColumn(wifright); :}
                  | IF:wif expression:e1 error:e5 statements:e2 elsif_statement:e3  ELSE statements:e4 END IF SEMICOLON
                  {: RESULT= new IfStatementError(e5right,e5left,"ERROR: "+"linea: "+e5left+" , columna: "+e5right+" || "+"if sin then",e2,e3,e4); System.err.println("ERROR: "+"linea: "+e5left+" , columna: "+e5right+" || "+"if sin then"); RESULT.setLine(wifleft); RESULT.setColumn(wifright); :} 
                  | IF:wif expression:e1 THEN statements:e2 END IF error:e3
                  {: RESULT= new IfStatementError(e3right,e3left,"ERROR: "+"linea: "+e3left+" , columna: "+e3right+" || "+"se esperaba <;>",e2); System.err.println("ERROR: "+"linea: "+e3left+" , columna: "+e3right+" || "+"se esperaba <;>"); RESULT.setLine(wifleft); RESULT.setColumn(wifright); :}
                  | IF:wif expression:e1 THEN statements:e2 elsif_statement:e3 END IF error:e4
                  {: RESULT= new IfStatementError(e4right,e4left,"ERROR: "+"linea: "+e4left+" , columna: "+e4right+" || "+"se esperaba <;>",e2,e3); System.err.println("ERROR: "+"linea: "+e4left+" , columna: "+e4right+" || "+"se esperaba <;>"); RESULT.setLine(wifleft); RESULT.setColumn(wifright); :}
                  | IF:wif expression:e1 THEN statements:e2 ELSE statements:e3 END IF error:e4
                  {: RESULT= new IfStatementError(e4right,e4left,"ERROR: "+"linea: "+e4left+" , columna: "+e4right+" || "+"se esperaba <;>",e2,e3); System.err.println("ERROR: "+"linea: "+e4left+" , columna: "+e4right+" || "+"se esperaba <;>"); RESULT.setLine(wifleft); RESULT.setColumn(wifright); :}
                  | IF:wif expression:e1 THEN statements:e2 elsif_statement:e3  ELSE statements:e4 END IF error:e5
                  {: RESULT= new IfStatementError(e5right,e5left,"ERROR: "+"linea: "+e5left+" , columna: "+e5right+" || "+"se esperaba <;>",e2,e3,e4); System.err.println("ERROR: "+"linea: "+e5left+" , columna: "+e5right+" || "+"se esperaba <;>"); RESULT.setLine(wifleft); RESULT.setColumn(wifright); :}
;

 elsif_statement ::= ELSIF:weif expression:e1 THEN statements:e2 elsif_statement:e3
                     {: ElseIfStatement var = new ElseIfStatement(e1,e2);var.setLine(weifleft); var.setColumn(weifright); e3.addE(var); RESULT=e3;  :}
                     | ELSIF:weif expression:e1 THEN statements:e2
                     {:RESULT= new ElsifStatements();ElseIfStatement var=new ElseIfStatement(e1,e2) ; var.setLine(weifleft); var.setColumn(weifright); RESULT.addE(var); :}
                     | ELSIF:weif expression:e1 error:e3 statements:e2
                     {:RESULT= new ElsifStatements(); ElseIfStatementError var =new ElseIfStatementError(e3right,e3left,"ERROR: "+"linea: "+e3left+" , columna: "+e3right+" || "+"elsif sin then",e2); 
                     var.setLine(weifleft); var.setColumn(weifright);RESULT.addE(var);  
                     System.err.println("ERROR: "+"linea: "+e3left+" , columna: "+e3right+" || "+"elsif sin then"); :}
                     | ELSIF:weif error:e1 THEN statements:e2
                     {: RESULT= new ElsifStatements(); ElseIfStatementError var = new ElseIfStatementError(e1right,e1left,"ERROR: "+"linea: "+e1left+" , columna: "+e1right+" || "+"expresion no valida en elsif",e2); var.setLine(weifleft); var.setColumn(weifright); RESULT.addE(var); 
                     System.err.println("ERROR: "+"linea: "+e1left+" , columna: "+e1right+" || "+"expresion no valida en elsif"); :}
                     | ELSIF:weif expression:e1 error:e3 statements:e2 elsif_statement:e4
                     {: ElseIfStatementError var= new ElseIfStatementError(e3right,e3left,"ERROR: "+"linea: "+e3right+" , columna: "+e3right+" || "+"elsif sin then",e2);var.setLine(weifleft); var.setColumn(weifright);e4.addE(var);
                     System.err.println("ERROR: "+"linea: "+e3left+" , columna: "+e3right+" || "+"elsif sin then");  :}
                     | ELSIF:weif error:e1 THEN statements:e2 elsif_statement:e3
                     {: ElseIfStatementError var =new ElseIfStatementError(e1right,e1left,"ERROR: "+"linea: "+e1left+" , columna: "+e1right+" || "+"expresion no valida en elsif",e2); var.setLine(weifleft); var.setColumn(weifright);e3.addE(var);
                     System.err.println("ERROR: "+"linea: "+e1left+" , columna: "+e1right+" || "+"expresion no valida en elsif");  :}
 ;

 while_statement ::= WHILE:ww expression:e1 LOOP statements:e2 END LOOP SEMICOLON
                     {: RESULT =  new WhileStatement(e1, e2); RESULT.setLine(wwleft); RESULT.setColumn(wwright); :}
                     |WHILE:ww error:e1 LOOP statements:e2 END LOOP SEMICOLON
                     {:RESULT = new WhileStatementError(e1right,e1left,"ERROR: "+"linea: "+e1left+" , columna: "+e1right+" || "+"expresion no valida en while",e2); System.err.println("ERROR: "+"linea: "+e1left+" , columna: "+e1right+" || "+"expresion no valida en while"); RESULT.setLine(wwleft); RESULT.setColumn(wwright); :}
                     |WHILE:ww expression:e1 error:e3 statements:e2 END LOOP SEMICOLON
                     {:RESULT = new WhileStatementError(e3right,e3left,"ERROR: "+"linea: "+e3left+" , columna: "+e3right+" || "+"while sin loop",e2); System.err.println("ERROR: "+"linea: "+e3left+" , columna: "+e3right+" || "+"while sin loop"); RESULT.setLine(wwleft); RESULT.setColumn(wwright); :}
                     |WHILE:ww expression:e1 LOOP statements:e2 END LOOP error:e3
                     {: RESULT = new WhileStatementError(e3right,e3left,"ERROR: "+"linea: "+e3left+" , columna: "+e3right+" || "+"se esperaba <;> ",e2); System.err.println("ERROR: "+"linea: "+e3left+" , columna: "+e3right+" || "+"se esperaba <;> "); RESULT.setLine(wwleft); RESULT.setColumn(wwright); :}
 ;

 exit_statement ::= EXIT:we WHEN expression:e1 SEMICOLON
                    {: RESULT =  new ExitStatement(e1); RESULT.setLine(weleft); RESULT.setColumn(weright); :}
                    |EXIT:we WHEN expression:e1 error:e2
                    {: RESULT= new ExitStatementError(e2right,e2left,"ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"se esperaba <;> "); System.err.println("ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"se esperaba <;> "); RESULT.setLine(weleft); RESULT.setColumn(weright); :}
                    |EXIT:we WHEN error:e2 SEMICOLON
                    {: RESULT= new ExitStatementError(e2right,e2left,"ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"expresion no valida"); System.err.println("ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"expresion no valida"); RESULT.setLine(weleft); RESULT.setColumn(weright); :}
 ;

 loop_statement ::= LOOP:wl statements:e1 END LOOP SEMICOLON
                    {: RESULT =  new LoopStatement(e1); RESULT.setLine(wlleft); RESULT.setColumn(wlright); :}
                    |LOOP:wl statements:e1 END LOOP error:e2
                    {: RESULT= new LoopStatementError(e2right,e2left,"ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"se esperaba <;> ",e1); System.err.println("ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"se esperaba <;> "); RESULT.setLine(wlleft); RESULT.setColumn(wlright); :}
 ;

 for_statement ::= FOR:wf ID:e1 IN expression:e2 RANK expression:e3 LOOP statements:e4 END LOOP SEMICOLON
                   {: RESULT =  new ForStatement(new Identifier(e1), e2, e3, e4); RESULT.setLine(wfleft); RESULT.setColumn(wfright); :} 
                   |FOR:wf ID:e1 IN expression:e2 RANK expression:e3 LOOP statements:e4 END LOOP error:e5
                   {: RESULT= new ForStatementError(e5right,e5left,"ERROR: "+"linea: "+e5left+" , columna: "+e5right+" || "+"se esperaba <;> ",e4); System.err.println("ERROR: "+"linea: "+e5left+" , columna: "+e5right+" || "+"se esperaba <;> "); RESULT.setLine(wfleft); RESULT.setColumn(wfright); :}
                   |FOR:wf ID:e1 IN expression:e2 RANK expression:e3 error:e5 statements:e4 END LOOP SEMICOLON
                   {: RESULT= new ForStatementError(e5right,e5left,"ERROR: "+"linea: "+e5left+" , columna: "+e5right+" || "+"for sin loop",e4); System.err.println("ERROR: "+"linea: "+e5left+" , columna: "+e5right+" || "+"for sin loop"); RESULT.setLine(wfleft); RESULT.setColumn(wfright); :}
 ;

 procedure_statement ::= PROCEDURE:wp ID:e1 LPAR params_list:e2 RPAR IS declarations:e3 BEGIN statements:e4 END ID:e5 SEMICOLON
                         {: RESULT = new ProcedureStatement(new Identifier(e1), e2,e3,e4,new Identifier(e5)); RESULT.setLine(wpleft); RESULT.setColumn(wpright); :}
                         | PROCEDURE:wp ID:e1  IS declarations:e3 BEGIN statements:e4 END ID:e5 SEMICOLON
                         {:RESULT = new ProcedureStatement(new Identifier(e1),e3,e4,new Identifier(e5)); RESULT.setLine(wpleft); RESULT.setColumn(wpright); :}
                         | PROCEDURE:wp ID:e1 LPAR params_list:e2 RPAR IS declarations:e3 BEGIN statements:e4 END ID:e5 error:e6
                         {: RESULT= new ProcedureStatementError(e6right, e6left,"ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"se esperaba <;> ",e3,e4); System.err.println("ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"se esperaba <;> "); RESULT.setLine(wpleft); RESULT.setColumn(wpright); :}
                         | PROCEDURE:wp ID:e1  IS declarations:e3 BEGIN statements:e4 END ID:e5 error:e6
                         {: RESULT= new ProcedureStatementError(e6right, e6left,"ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"se esperaba <;> ",e3,e4); System.err.println("ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"se esperaba <;> "); RESULT.setLine(wpleft); RESULT.setColumn(wpright); :}
                         |PROCEDURE:wp ID:e1 LPAR params_list:e2 RPAR error:e6 declarations:e3 BEGIN statements:e4 END ID:e5 SEMICOLON
                         {: RESULT= new ProcedureStatementError(e6right,e6left,"ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"procedure sin is ",e3,e4); System.err.println("ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"procedure sin is "); RESULT.setLine(wpleft); RESULT.setColumn(wpright); :}
                         |PROCEDURE:wp ID:e1  error:e6 declarations:e3 BEGIN statements:e4 END ID:e5 SEMICOLON
                         {: RESULT= new ProcedureStatementError(e6right,e6left,"ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"procedure sin is ",e3,e4); System.err.println("ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"procedure sin is "); RESULT.setLine(wpleft); RESULT.setColumn(wpright); :}
                         |PROCEDURE:wp ID:e1 LPAR params_list:e2 RPAR IS declarations:e3 BEGIN statements:e4 END error:e6 SEMICOLON
                         {: RESULT= new ProcedureStatementError(e6right,e6left,"ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"se esperaba un <identificador>",e3,e4); System.err.println("ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"se esperaba un <identificador>"); RESULT.setLine(wpleft); RESULT.setColumn(wpright); :}
                         |PROCEDURE:wp ID:e1  IS declarations:e3 BEGIN statements:e4 END error:e5 SEMICOLON
                         {:RESULT= new ProcedureStatementError(e5right,e5left,"ERROR: "+"linea: "+e5left+" , columna: "+e5right+" || "+"se esperaba un <identificador>",e3,e4); System.err.println("ERROR: "+"linea: "+e5left+" , columna: "+e5right+" || "+"se esperaba un <identificador>"); RESULT.setLine(wpleft); RESULT.setColumn(wpright); :}
                         |PROCEDURE:wp ID:e1 LPAR error:e6 RPAR IS declarations:e3 BEGIN statements:e4 END ID:e5 SEMICOLON
                         {: RESULT= new ProcedureStatementError(e6right,e6left,"ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"parametros de procedure no validos",e3,e4); System.err.println("ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"parametros de procedure no validos"); RESULT.setLine(wpleft); RESULT.setColumn(wpright); :}
                         |PROCEDURE:wp ID:e1 LPAR params_list:e2 RPAR IS declarations:e3 BEGIN statements:e4 error:e6 ID:e5 SEMICOLON
                         {:RESULT= new ProcedureStatementError(e6right,e6left,"ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"begin sin end en procedure",e3,e4); System.err.println("ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"begin sin end en procedure"); RESULT.setLine(wpleft); RESULT.setColumn(wpright); :}
                         |PROCEDURE:wp ID:e1  IS declarations:e3 BEGIN statements:e4 error:e6 ID:e5 SEMICOLON
                         {:RESULT= new ProcedureStatementError(e6right,e6left,"ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"begin sin end en procedure",e3,e4); System.err.println("ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"begin sin end en procedure"); RESULT.setLine(wpleft); RESULT.setColumn(wpright); :}
 ;

 params_list ::=  variable_list:e1 COLON IN type:e2 
                  {:RESULT= new ParamsList(); RESULT.addE(new In(e1,e2));:}
                  |variable_list:e1 COLON OUT type:e2 
                  {: RESULT= new ParamsList(); RESULT.addE(new Out(e1,e2)); :}
                  |variable_list:e1 COLON INOUT type:e2 
                  {:RESULT= new ParamsList(); RESULT.addE(new InOut(e1,e2)); :}
                  |params_list:e3 SEMICOLON variable_list:e1 COLON IN type:e2 
                  {: e3.addE(new In(e1,e2)); RESULT=e3; :}
                  |params_list:e3 SEMICOLON variable_list:e1 COLON OUT type:e2 
                  {: e3.addE(new Out(e1,e2)); RESULT=e3; :}
                  |params_list:e3 SEMICOLON variable_list:e1 COLON INOUT type:e2 
                  {: e3.addE(new InOut(e1,e2)); RESULT=e3; :}   
 ;

 function_statement ::= FUNCTION:wf ID:e1 LPAR params_list:e2 RPAR RETURN type:e3 IS declarations:e4 BEGIN statements:e5 END ID:e6 SEMICOLON
                        {:RESULT= new FunctionStatement(new Identifier(e1),new Identifier(e6),e2,e4,e5,e3); RESULT.setLine(wfleft); RESULT.setColumn(wfright); :}
                        |FUNCTION:wf ID:e1 RETURN type:e3 IS declarations:e4 BEGIN statements:e5 END ID:e6 SEMICOLON
                        {:RESULT= new FunctionStatement(new Identifier(e1),new Identifier(e6),e4,e5,e3); RESULT.setLine(wfleft); RESULT.setColumn(wfright); :}
                        |FUNCTION:wf ID:e1 LPAR params_list:e2 RPAR RETURN type:e3 IS declarations:e4 BEGIN statements:e5 END ID:e6 error:e7
                        {: RESULT= new FunctionStatementError(e7right,e7left,"ERROR: "+"linea: "+e7left+" , columna: "+e7right+" || "+"se esperaba <;> ",e4,e5); System.err.println("ERROR: "+"linea: "+e7left+" , columna: "+e7right+" || "+"se esperaba <;> "); RESULT.setLine(wfleft); RESULT.setColumn(wfright); :}
                        |FUNCTION:wf ID:e1 RETURN type:e3 IS declarations:e4 BEGIN statements:e5 END ID:e6 error:e7
                        {: RESULT= new FunctionStatementError(e7right,e7left,"ERROR: "+"linea: "+e7left+" , columna: "+e7right+" || "+"se esperaba <;>",e4,e5); System.err.println("ERROR: "+"linea: "+e7left+" , columna: "+e7right+" || "+"se esperaba <;>"); RESULT.setLine(wfleft); RESULT.setColumn(wfright); :}
                        |FUNCTION:wf ID:e1 LPAR params_list:e2 RPAR RETURN type:e3 error:e7 declarations:e4 BEGIN statements:e5 END ID:e6 SEMICOLON
                        {: RESULT= new FunctionStatementError(e7right,e7left,"ERROR: "+"linea: "+e7left+" , columna: "+e7right+" || "+"function sin is",e4,e5); System.err.println("ERROR: "+"linea: "+e7left+" , columna: "+e7right+" || "+"function sin is"); RESULT.setLine(wfleft); RESULT.setColumn(wfright); :}
                        |FUNCTION:wf ID:e1 RETURN type:e3 error:e7 declarations:e4 BEGIN statements:e5 END ID:e6 SEMICOLON
                        {: RESULT= new FunctionStatementError(e7right,e7left,"ERROR: "+"linea: "+e7left+" , columna: "+e7right+" || "+"function sin is",e4,e5); System.err.println("ERROR: "+"linea: "+e7left+" , columna: "+e7right+" || "+"function sin is") ; RESULT.setLine(wfleft); RESULT.setColumn(wfright); :}
                        |FUNCTION:wf ID:e1 LPAR params_list:e2 RPAR RETURN type:e3 IS declarations:e4 BEGIN statements:e5 END error:e6 SEMICOLON
                        {: RESULT= new FunctionStatementError(e6right,e6left,"ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"se esperaba <identificador>",e4,e5); System.err.println("ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"se esperaba <identificador>"); RESULT.setLine(wfleft); RESULT.setColumn(wfright); :}
                        |FUNCTION:wf ID:e1 RETURN type:e3 IS declarations:e4 BEGIN statements:e5 END error:e6 SEMICOLON
                        {: RESULT= new FunctionStatementError(e6right,e6left,"ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"se esperaba <identificador>",e4,e5); System.err.println("ERROR: "+"linea: "+e6left+" , columna: "+e6right+" || "+"se esperaba <identificador>"); RESULT.setLine(wfleft); RESULT.setColumn(wfright); :}
                        |FUNCTION:wf ID:e1 LPAR error:e2 RPAR RETURN type:e3 IS declarations:e4 BEGIN statements:e5 END ID:e6 SEMICOLON
                        {: RESULT= new FunctionStatementError(e2right,e2left,"ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"parametros de function no validos",e4,e5); System.err.println("ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"parametros de function no validos"); RESULT.setLine(wfleft); RESULT.setColumn(wfright); :}
                        |FUNCTION:wf ID:e1 LPAR params_list:e2 RPAR RETURN type:e3 IS declarations:e4 BEGIN statements:e5 error:e7 ID:e6 SEMICOLON
                        {: RESULT= new FunctionStatementError(e7right,e7left,"ERROR: "+"linea: "+e7left+" , columna: "+e7right+" || "+"begin sin end en function",e4,e5); System.err.println("ERROR: "+"linea: "+e7left+" , columna: "+e7right+" || "+"begin sin end en function"); RESULT.setLine(wfleft); RESULT.setColumn(wfright); :}
                        |FUNCTION:wf ID:e1 RETURN type:e3 IS declarations:e4 BEGIN statements:e5 error:e7 ID:e6 SEMICOLON
                        {: RESULT= new FunctionStatementError(e7right,e7left,"ERROR: "+"linea: "+e7left+" , columna: "+e7right+" || "+"begin sin end en function",e4,e5); System.err.println("ERROR: "+"linea: "+e7left+" , columna: "+e7right+" || "+"begin sin end en function"); RESULT.setLine(wfleft); RESULT.setColumn(wfright); :}
;

 return_statement ::= RETURN:wr expression:e1 SEMICOLON
                      {: RESULT= new ReturnStatement(e1); RESULT.setLine(wrleft); RESULT.setColumn(wrright); :}
                      |RETURN:wr expression:e1 error:e2
                      {: RESULT= new ReturnStatementError(e2right,e2left,"ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"se esperaba <;>"); System.err.println("ERROR: "+"linea: "+e2left+" , columna: "+e2right+" || "+"se esperaba <;>"); RESULT.setLine(wrleft); RESULT.setColumn(wrright); :}
                      |RETURN:wr error:e1 SEMICOLON
                      {: RESULT= new ReturnStatementError(e1right,e1left,"ERROR: "+"linea: "+e1left+" , columna: "+e1right+" || "+"expresion no valida"); System.err.println("ERROR: "+"linea: "+e1left+" , columna: "+e1right+" || "+"expresion no valida"); RESULT.setLine(wrleft); RESULT.setColumn(wrright); :}
 ;