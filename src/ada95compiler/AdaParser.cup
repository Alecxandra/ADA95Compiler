package ada95compiler;

import java_cup.runtime.*;

/* Lexer*/
  parser code {:
      AdaLexer lexer;

      public ParserAda(AdaLexer lex){
       super(lex);
       lexer = lex;
      }

      public void syntax_error(Symbol s) {
          report_error("", s);
      }

      public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error ");
        m.append(message);
        java_cup.runtime.Symbol s = null;
        if (info instanceof java_cup.runtime.Symbol) {
            s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" linea " + (s.left));

                if (s.right >= 0) {
                    m.append(", columna " + (s.right));
                }
            }

            if (s.value != null && !s.value.equals("")) {
                m.append(". No se esperaba el s√≠mbolo: '" + s.value + "'");            
           }
        }
        System.err.println(m);
      }
      
  :}



 /* Terminals */

 /* Types*/
  terminal        INTEGER,BOOLEAN,FLOAT;    

 /* Booleans*/
  terminal        TRUE,FALSE;

 /* arithmetic operations*/
  terminal        ADD,MIN,POT,MUL,DIV,UMIN; 
  
 /* logical expressions */
  terminal        AND,OR,NOT;

 /* I/O */
  terminal        GET,PUT;

 /* control structures */
  terminal        IF,THEN,ELSIF,ELSE,FOR,LOOP,EXIT,WHEN,WHILE;

 /* other symbols */
  terminal        COMMA,SEMICOLON,COLON,LPAR,RPAR,RANK;

 /* Blocks */
  terminal        PROCEDURE,IS,BEGIN,END,DECLARE;

 /* Functions*/
  terminal        FUNCTION,RETURN;

 /* variables */
  terminal String ID;

 /* Numbers */
  terminal Float   FLOATN;
  terminal Integer INTEGERN;

 /* Strings*/
  terminal String  STRINGCONT;

 
 /* Boolean operators*/
  terminal        LEQUAL,GEQUAL,DISTINCT,GREATER,LESS,EQUAL;
 
 /*  Assignment operator */
  terminal        ASSIGN;

 /* parameters */
  terminal        INOUT,IN,OUT;

 /* main */
  terminal        MAIN;  

 /* Non terminals*/
 non terminal         arit_expre, expression; 
 non terminal         literal_expre;
 non terminal         boolean_expre;
 non terminal         logical_expre;
 non terminal         declare_expre, variable_list;
 non terminal         type;
 non terminal         variable; 
 non terminal         statement;
 non terminal         assignment_expre;
 non terminal         io_expre;
 non terminal         function_call;
 non terminal         arguments_list;
 non terminal         if_statement;
 non terminal         elsif_statement;
 non terminal         while_statement;
 non terminal         loop_statement, exit_statement;
 non terminal         for_statement;
 non terminal         statements;
 non terminal         procedure_statement, params_list;
 non terminal         function_statement, return_statement;      

/* precedence */
precedence left     AND,OR;
precedence left     LEQUAL,GEQUAL,GREATER,DISTINCT,LESS,EQUAL; 
precedence left     ADD,MIN;
precedence left     MUL,DIV;
precedence right    POT,NOT,UMIN; 
precedence nonassoc ELSE;

 /* CFG */

statements ::= statement:s1 
               {: RESULT=s1;System.out.println(s1); :}
               |statements:s1 statement:s2
               {: System.out.println(s1 +" "+s2); :}  
;

statement ::= declare_expre:e1 
              {: System.out.println(e1+";");:}
              | expression:e1 SEMICOLON
              {:RESULT=e1; System.out.println(e1+";");:}
              | assignment_expre:e1 SEMICOLON
              {: RESULT=e1; System.out.println(e1+";");:}
              | io_expre:e1 
              {: RESULT=e1;System.out.println(e1+";");:}
              | if_statement:e1 
              {:RESULT=e1;System.out.println(e1+";");:}
              | while_statement:e1 
              {: RESULT =e1; System.out.println(e1+";");:}
              | exit_statement: e1 
              {: RESULT=e1; System.out.println(e1+";");:}
              | loop_statement:e1 
              {: RESULT=e1; System.out.println(e1+";");:}
              | for_statement:e1 
              {: RESULT=e1; System.out.println(e1+";");:}
              | procedure_statement:e1 
              {: RESULT=e1; System.out.println(e1+";");:}
              |function_statement:e1 
              {: RESULT=e1; System.out.println(e1+";");:}
              | return_statement:e1 
              {: RESULT=e1; System.out.println(e1+";");:}              
;

expression ::=  variable:id
                {: RESULT = id;:}   
                | literal_expre:le
                {: RESULT = le;:}  
                | arit_expre:ar
                {: RESULT = ar;:}
                | LPAR expression:e1 RPAR
                {:RESULT=e1; :}
                | boolean_expre:be
                {: RESULT=be; :}
                |logical_expre:le
                {:RESULT=le; :}
                |function_call:e1
                {:RESULT=e1; :}
 ; 

 variable::= ID:id
             {: RESULT= id;:}  
 ; 

 literal_expre ::= FLOATN:num
                   {: RESULT = num;:} 
                   |INTEGERN:num1
                   {: RESULT = num1;:}
                   |STRINGCONT:s
                   {: RESULT= s;:} 
                    
 ;

 arit_expre ::= expression:e1 ADD expression:e2 
               {: System.out.println(e1+"+"+e2); :}  
               | expression:e1 MIN expression:e2 
               {: System.out.println(e1+"-"+e2); :}
               | expression:e1 MUL expression:e2
               {: System.out.println(e1+"*"+e2); :} 
               |expression:e1 DIV expression:e2
               {: System.out.println(e1+"/"+e2); :}  
               | expression:e1 POT expression:e2
               {: System.out.println(e1+"**"+e2); :}
               | MIN expression:e1
               {: System.out.println("-"+e1);:}
               %prec UMIN
               

 ;

 boolean_expre ::= expression:e1 LEQUAL expression:e2
                  {: System.out.println(e1+"<="+e2); :}
                  | expression:e1 GEQUAL expression:e2
                  {: System.out.println(e1+">="+e2); :}  
                  | expression:e1 DISTINCT expression:e2
                  {: System.out.println(e1+"/="+e2); :}
                  | expression:e1 GREATER expression:e2
                  {: System.out.println(e1+">"+e2); :}
                  | expression:e1 LESS expression:e2
                  {: System.out.println(e1+"<"+e2); :} 
                  | expression:e1 EQUAL expression:e2
                  {: System.out.println(e1+"="+e2); :}
 ;

 logical_expre ::= expression:e1 AND expression:e2
                   {: System.out.println(e1+"and"+e2); :} 
                   | expression:e1 OR expression:e2
                   {: System.out.println(e1+"or"+e2);:}
                   | NOT expression:e1
                   {: System.out.println("not"+e1);:}
                   |TRUE
                   {: System.out.println("true");:}
                   |FALSE
                   {: System.out.println("false");:} 
 ;

 type ::= INTEGER
          {:System.out.println("integer");:} 
          |BOOLEAN
          {:System.out.println("boolean");:}
          |FLOAT
          {:System.out.println("float");:} 
 ;

 declare_expre ::= variable_list:e1 COLON type:e2 SEMICOLON
                   {: RESULT=e1;System.out.println(e1+ ":"+e2);:}
                   |variable_list:e1 COLON error
                   {: System.err.println("ERROR: se esperaba <tipo>");:}
                   |error COLON type:e2
                   {: System.err.println("ERROR: lista de variables");:}
                   |variable_list:e1 error type:e2
                   {: System.err.println("ERROR: se esperaba <:>"); :}
 ;

 variable_list::= ID:e1
                  {:RESULT=e1; System.out.println(e1);:} 
                  |variable_list:e1 COMMA ID:e2
                  {:System.out.println(e1+","+e2);:}

 ;

 assignment_expre ::= ID:e1 ASSIGN expression:e3 
                      {:System.out.println(e1+":="+e3);:}
                      | declare_expre:e1 ASSIGN expression:e3 
                      {:System.out.println(e1+" := "+e3);:}
                      |ID:e1 ASSIGN error
                      {: System.err.println("ERROR:expresion no valida");:}
                      |ID:e1 EQUAL error expression:e3
                      {: System.err.println("ERROR: no se esperaba < = >");:}
;

 io_expre ::= GET LPAR ID:e1 RPAR SEMICOLON
              {: System.out.println("get"+"("+e1+")"); :}
              | PUT LPAR expression:e1 RPAR SEMICOLON
              {: System.out.println("put"+"("+e1+")"); :}
              | PUT LPAR expression:e1 error
              {: System.err.println("ERROR: falta parentesis"); :}
              |GET LPAR ID:e1 error
              {: System.err.println("ERROR: falta parentesis"); :}
              |GET LPAR error RPAR
              {: System.err.println("ERROR: se esperaba <identificador>");:}
              |PUT LPAR error RPAR
              {: System.err.println("ERROR: expresion no valida"); :}
              |GET LPAR ID:e1 RPAR error
              {: System.err.println("ERROR: se esperaba <;>");:}
              |PUT LPAR expression:e1 RPAR error
              {: System.err.println("ERROR: se esperaba <;>");:}
 ;

 function_call ::= ID:e1 LPAR arguments_list:e2 RPAR
                   {: System.out.println(e1+"("+e2+")"); :}
                   |ID:e1 LPAR RPAR 
                   {: System.out.println(e1+"("+")"); :}
                   |ID:e1 LPAR arguments_list:e2 error
                   {: System.err.println("Falta parentesis");:} 
 ;

 arguments_list ::= expression:e1
                    {: RESULT=e1; System.out.println(e1);:}
                    |arguments_list:e1 COMMA expression:e2
                    {: System.out.println(e1+","+e2);:} 
 ;

 if_statement ::= IF expression:e1 THEN statements:e2 END IF SEMICOLON
                  {: System.out.println("if "+e1+" then "+e2+" end if "); :}
                  | IF error THEN statements:e2 END IF SEMICOLON
                  {: System.err.println("ERROR: expresion no valida en if"); :}
                  | IF expression:e1 error statements:e2 END IF SEMICOLON
                  {: System.err.println("ERROR: if sin then"); :}
                  | IF expression:e1 THEN statements:e2 elsif_statement:e3 END IF SEMICOLON
                  {: System.out.println("if "+e1+" then "+e2+" "+e3+" end if "); :}
                  |IF error THEN statements:e2 elsif_statement:e3 END IF SEMICOLON
                  {: System.err.println("ERROR: expresion no valida en if");:}
                  |IF expression:e1 error statements:e2 elsif_statement:e3 END IF SEMICOLON
                  {: System.err.println("ERROR: if sin then");:}
                  | IF expression:e1 THEN statements:e2 ELSE statements:e3 END IF SEMICOLON
                  {: System.out.println("if "+e1+" then "+e2+" else "+e3+" end if "); :}
                  | IF error THEN statements:e2 ELSE statements:e3 END IF SEMICOLON
                  {: System.err.println("ERROR: expresion no valida en if"); :}
                  | IF expression:e1 error statements:e2 ELSE statements:e3 END IF SEMICOLON
                  {: System.err.println("ERROR: if sin then"); :}
                  | IF expression:e1 THEN statements:e2 elsif_statement:e3  ELSE statements:e4 END IF SEMICOLON
                  {: System.out.println("if "+e1+" then "+e2+" "+e3+ " else "+e4+" end if "); :}
                  | IF error THEN statements:e2 elsif_statement:e3  ELSE statements:e4 END IF SEMICOLON
                  {: System.err.println("ERROR: expresion no valida en if");:}
                  |IF expression:e1 error statements:e2 elsif_statement:e3  ELSE statements:e4 END IF SEMICOLON
                  {: System.err.println("ERROR: if sin then");:} 
                  |IF expression:e1 THEN statements:e2 END IF error
                  {: System.err.println("ERROR: se esperaba <;>");:}
                  |IF expression:e1 THEN statements:e2 elsif_statement:e3 END IF error
                  {: System.err.println("ERROR: se esperaba <;>");:}
                  |IF expression:e1 THEN statements:e2 ELSE statements:e3 END IF error
                  {: System.err.println("ERROR: se esperaba <;>");:}
                  |IF expression:e1 THEN statements:e2 elsif_statement:e3  ELSE statements:e4 END IF error
                  {: System.err.println("ERROR: se esperaba <;>");:}


;

 elsif_statement ::= ELSIF expression:e1 THEN statements:e2 elsif_statement:e3
                     {: System.out.println("elsif "+e1+" then "+e2+ "  "+e3); :}
                     | ELSIF expression:e1 THEN statements:e2
                     {: System.out.println("elsif "+e1+" then "+e2+ "  ");:}
                     | ELSIF expression:e1 error statements:e2
                     {: System.err.println("ERROR: elsif sin then");:}
                     | ELSIF error THEN statements:e2
                     {: System.err.println("ERROR: expresion no valida en if"); :}
 ;

 while_statement ::= WHILE expression:e1 LOOP statements:e2 END LOOP SEMICOLON
                     {: System.out.println("while  "+e1+" loop "+e2+ "  END LOOP"); :}
                     |WHILE error LOOP statements:e2 END LOOP SEMICOLON
                     {: System.err.println("ERROR: expresion no valida en while"); :}
                     |WHILE expression:e1 error statements:e2 END LOOP SEMICOLON
                     {: System.err.println("ERROR: while sin loop"); :}
                     |WHILE expression:e1 LOOP statements:e2 END LOOP error
                     {:  System.err.println("ERROR: se esperaba <;> ");:}
 ;

 exit_statement ::= EXIT WHEN expression:e1 SEMICOLON
                    {: System.out.println("exit when "+e1); :}
                    |EXIT WHEN expression:e1 error
                    {: System.err.println("ERROR: se esperaba <;> ");:}
 ;

 loop_statement ::= LOOP statements:e1 END LOOP SEMICOLON
                    {: System.out.println("loop  "+e1+ " end loop "); :}
                    |LOOP statements:e1 END LOOP error
                    {: System.err.println("ERROR: se esperaba <;> ");:}
 ;

 for_statement ::= FOR variable:e1 IN INTEGERN:e2 RANK INTEGERN:e3 LOOP statements:e4 END LOOP SEMICOLON
                   {: System.out.println("for "+e1+ " in " +e2+".."+e3+" loop ");System.out.println(e4+"\n"+"end loop");:} 
                   |FOR variable:e1 IN INTEGERN:e2 RANK INTEGERN:e3 LOOP statements:e4 END LOOP error
                   {: System.err.println("ERROR: se esperaba <;> ");:}
 ;

 procedure_statement ::= PROCEDURE ID:e1 LPAR params_list:e2 RPAR IS statements:e3 BEGIN statements:e4 END ID:e5 SEMICOLON
                         {: System.out.println("procedure "+e1+ " ( "+e2+" ) is"+e3+"\n"+"begin\n"+e4+"\n end "+e5); :}
                         | PROCEDURE ID:e1  IS statements:e3 BEGIN statements:e4 END ID:e5 SEMICOLON
                         {: System.out.println("procedure "+e1+" is "+e3+"\n"+"begin\n"+e4+"\n end "+e5); :}
                         | PROCEDURE ID:e1 LPAR params_list:e2 RPAR IS statements:e3 BEGIN statements:e4 END ID:e5 error
                         {: System.err.println("ERROR: se esperaba <;> ");:}
                         | PROCEDURE ID:e1  IS statements:e3 BEGIN statements:e4 END ID:e5 error
                         {: System.err.println("ERROR: se esperaba <;> ");:}
 ;

 params_list ::=  variable_list:e1 COLON IN type:e2 
                  {: System.out.println(e1+" : in "+e2+";"); :}
                  |variable_list:e1 COLON OUT type:e2 
                  {: System.out.println(e1+" : out "+e2+";"); :}
                  |variable_list:e1 COLON INOUT type:e2 
                  {: System.out.println(e1+" : in out "+e2+";"); :}
                  |params_list:e3 SEMICOLON variable_list:e1 COLON IN type:e2 
                  {: System.out.println(e3+" "+e1+" : in "+e2+";"); :}
                  |params_list:e3 SEMICOLON variable_list:e1 COLON OUT type:e2 
                  {: System.out.println(e3+" "+e1+" : out "+e2+";"); :}
                  |params_list:e3 SEMICOLON variable_list:e1 COLON INOUT type:e2 
                  {: System.out.println(e3+" "+e1+" : in out "+e2+";"); :}   
 ;

 function_statement ::= FUNCTION ID:e1 LPAR params_list:e2 RPAR RETURN type:e3 IS statements:e4 BEGIN statements:e5 END ID:e6 SEMICOLON
                        {:System.out.println("function " +e1+" ( "+e2+" ) return "+e3+"is\n"+e4+"\n begin\n"+e5+"\n end "+e6); :}
                        |FUNCTION ID:e1 RETURN type:e3 IS statements:e4 BEGIN statements:e5 END ID:e6 SEMICOLON
                        {:System.out.println("function " +e1 +" return "+e3+"is\n"+e4+"\n begin\n"+e5+"\n end "+e6); :}
                        |FUNCTION ID:e1 LPAR params_list:e2 RPAR RETURN type:e3 IS statements:e4 BEGIN statements:e5 END ID:e6 error
                        {: System.err.println("ERROR: se esperaba <;> ");:}
                        |FUNCTION ID:e1 RETURN type:e3 IS statements:e4 BEGIN statements:e5 END ID:e6 error
                        {: System.err.println("ERROR: se esperaba <;> ");:}
;

 return_statement ::= RETURN expression:e1 SEMICOLON
                      {: System.out.println("return "+e1);:}
                      |RETURN expression:e1 error
                      {: System.err.println("ERROR: se esperaba <;> ");:}
 ;