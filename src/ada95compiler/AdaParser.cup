import java_cup.runtime.*;

/* Lexer*/
  parser code {:
      AdaLexer lexer;

      public ParserAda(AdaLexer lex){
       super(lex);
       lexer = lex;
      }


  :}


 /* Terminals */

 /* Types*/
  terminal        INTEGER,BOOLEAN,FLOAT;    

 /* Booleans*/
  terminal        TRUE,FALSE;

 /* arithmetic operations*/
  terminal        ADD,MIN,POT,MUL,DIV; 
  
 /* logical expressions */
  terminal        AND,OR,NOT;

 /* I/O */
  terminal        GET,PUT;

 /* control structures */
  terminal        IF,THEN,ELSIF,ELSE,FOR,LOOP,EXIT,WHEN,WHILE;

 /* other symbols */
  terminal        COMMA,SEMICOLON,COLON,LPAR,RPAR;

 /* Blocks */
  terminal        PROCEDURE,IS,BEGIN,END,DECLARE;

 /* Functions*/
  terminal        FUNCTION,RETURN;

 /* variables */
  terminal String ID;

 /* Numbers */
  terminal Float   FLOATN;
  terminal Integer INTEGERN;

 /* Strings*/
  terminal String  STRINGCONT;

 
 /* Boolean operators*/
  terminal        LEQUAL,GEQUAL,DISTINCT,GREATER,LESS,EQUAL;
 
 /*  Assignment operator */
  terminal        ASSIGN;

 /* parameters */
  terminal        INOUT,IN,OUT;

 /* main */
  terminal        MAIN;  

 /* Non terminals*/
 non terminal            logical_expre, arit_expre, num_expre; 

/* precedence */
precedence left   ADD, MIN;
precedence left   MUL, DIV;
precedence right  POT; 

 /* CFG */

arit_expre ::= num_expre:e1 ADD num_expre:e2 
               {: System.out.println(e1+"+"+e2); :}  
               | num_expre:e1 MIN num_expre:e2 
               {: System.out.println(e1+"-"+e2); :}
               | num_expre:e1 MUL num_expre:e2
               {: System.out.println(e1+"*"+e2); :} 
               |num_expre:e1 DIV num_expre:e2
               {: System.out.println(e1+"/"+e2); :}  
               | num_expre:e1 POT num_expre:e2
               {: System.out.println(e1+"**"+e2); :} ;
num_expre ::= ID | FLOATN | INTEGERN
;